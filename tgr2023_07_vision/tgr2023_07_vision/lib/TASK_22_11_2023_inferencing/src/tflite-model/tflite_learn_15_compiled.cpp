/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.11.2023 14:22:51

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0028758170083165169, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 20813, -29258, -29564, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00024592681438662112, 0.00019609721493907273, 0.0001935087057063356, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 78,79,116,-69,-71,-4,-2,15,-18,47,27,-7,-29,-82,82,11,-33,58,57,99,-24,-10,41,-59,-127,116,-41,5,60,31,-17,2, 
  /* [1][0][][] */ 60,-42,-69,19,-13,127,-34,-8,122,-46,-5,-84,-66,106,36,-54,93,-45,-4,-96,-121,17,114,68,29,11,2,-13,-67,-54,-4,-25, 
  /* [2][0][][] */ -37,74,-80,80,86,-45,-42,117,94,39,127,-39,-101,-88,82,120,-88,-53,9,-116,73,115,-61,-103,98,-66,-19,-121,15,-80,87,-39, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0040377303957939148, 0.0032196070533245802, 0.0031771077774465084, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 306, 160, -35, -157, -53, -63, 297, -49, -90, -478, -55, 7, -166, -315, -181, 5, -228, -344, -344, -257, 210, -239, 20, 103, 159, 1261, -361, -273, -340, 53, -309, -147, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0596984035801142e-05, 4.3663367250701413e-05, 4.5990735088707879e-05, 4.1378716559847817e-05, 4.8305006203008816e-05, 3.965615906054154e-05, 4.46936501248274e-05, 4.3180618376936764e-05, 4.322012682678178e-05, 4.3262578401481733e-05, 4.1280272853327915e-05, 5.9258643887005746e-05, 4.6558729081880301e-05, 4.2893410864053294e-05, 4.3661355448421091e-05, 4.1317340219393373e-05, 4.2538475099718198e-05, 4.2344254325143993e-05, 4.2457144445506856e-05, 4.1184091969626024e-05, 4.1953710024245083e-05, 4.5496792154153809e-05, 4.83981057186611e-05, 4.5238324673846364e-05, 5.0958944484591484e-05, 4.7936944611137733e-05, 4.798096779268235e-05, 4.0836119296727702e-05, 4.1511764720780775e-05, 4.2743144149426371e-05, 4.1868712287396193e-05, 5.2485003834590316e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -42,-46,121,11,104,-15,-88,-114,73,-96,-109,12,72,12,-36,64,-51,-27,-67,-51,-67,-104,11,120,-123,26,88,-36,124,2,-12,-82,94,-65,-105,78,-107,-84,-103,38,84,-83,-95,112,58,-104,117,-24,25,-45,-53,107,-81,-62,-98,121,11,78,124,-111,-78,90,-48,65,-13,25,80,109,56,115,88,-122,114,-101,35,99,-101,20,-57,38,67,15,101,9,-54,-39,-80,120,38,127,-2,-115,19,76,32,39, 
  /* [1][0][][] */ -59,28,-69,1,-61,69,41,18,83,-105,-102,98,54,-24,30,64,105,-40,42,101,-45,0,39,33,28,2,-37,105,26,-10,97,-82,57,103,-11,18,48,58,1,-61,-64,7,-17,-100,-35,33,-34,-45,-22,-81,116,43,21,82,-82,-47,27,100,65,84,-55,127,-83,-89,-79,30,81,44,89,26,24,12,-108,78,-51,49,66,-41,-38,67,-82,85,-47,-125,25,116,-65,-84,81,82,92,5,82,84,19,-17, 
  /* [2][0][][] */ 37,33,-49,87,-27,-61,80,103,-95,81,-37,111,74,-17,76,-105,-52,-31,33,43,-96,-14,104,20,-22,67,92,15,-51,66,69,81,-71,-24,-90,-104,-72,83,127,-30,-114,-76,10,-3,-82,104,-30,-70,88,34,77,-89,-32,53,16,10,-67,83,-61,6,-23,88,-40,56,80,38,46,77,-96,58,13,-74,28,-75,52,32,-57,-21,3,7,30,-91,-15,-46,-3,-96,-21,-37,79,101,-5,-2,-47,-85,-50,-70, 
  /* [3][0][][] */ 79,-1,35,-22,-85,31,-116,29,56,-2,68,-6,115,102,73,4,102,110,-52,25,127,-91,-70,-124,-39,-116,-79,109,37,-86,92,13,-50,-33,-13,-15,-107,-24,22,55,-23,-92,-102,-14,77,31,-47,-91,76,-94,52,-4,101,35,92,-97,-114,-115,-117,-66,-92,17,-36,89,48,-36,-64,-27,-36,-71,7,114,26,-114,47,-54,40,98,101,-64,-90,-123,44,102,30,49,-43,-118,-80,46,-7,-102,101,-94,-95,46, 
  /* [4][0][][] */ 53,86,-13,51,-39,-27,31,1,57,56,-4,25,38,-28,-10,-61,-33,3,-56,31,103,-79,74,22,-45,-6,62,-61,-59,42,-57,-40,69,107,22,-95,-66,0,-127,48,-39,-51,-65,-97,32,97,37,51,25,-54,-6,-62,-82,47,-72,25,44,-79,28,9,16,-88,-24,-52,-40,51,2,-27,31,-89,-84,-66,-43,19,87,41,61,-24,-4,-51,8,-33,-79,-14,0,66,81,6,-97,-62,27,64,34,88,-79,-16, 
  /* [5][0][][] */ 108,-99,81,67,43,-116,28,34,100,-123,-2,-69,38,97,36,38,65,68,-90,115,31,50,15,-32,-116,-59,-17,-98,44,41,21,-101,-36,-1,-72,21,-127,-37,23,24,-93,-56,42,104,-36,30,41,-67,-117,118,14,41,16,13,42,-19,104,42,-53,-49,30,-88,47,-64,-27,112,-37,21,88,4,90,-90,-53,90,-44,-83,17,-59,10,88,120,29,11,125,-85,89,-11,47,71,-106,116,106,-23,31,85,-80, 
  /* [6][0][][] */ 16,-29,127,77,-66,-58,6,76,-11,-61,12,-70,79,60,120,-104,58,5,4,97,-72,-104,118,68,-40,-76,-3,-39,-3,-110,49,-75,-85,-112,-38,-88,21,41,-84,81,86,59,28,3,-103,104,-84,-32,-74,39,-27,-61,69,-52,96,-24,15,-5,-58,124,-92,44,67,-68,-49,68,107,-44,78,-2,-87,-2,61,-63,-52,-23,-73,-80,-46,-23,36,-19,44,-26,-62,-76,-31,-90,85,95,113,14,-46,-61,73,-26, 
  /* [7][0][][] */ 120,63,-48,-41,-98,94,-19,-8,119,-25,-96,-3,62,-86,46,69,41,20,-1,117,58,35,-9,84,-98,98,44,48,-91,97,-19,39,29,27,69,94,-124,89,-26,-25,97,-75,84,52,52,-1,106,-112,56,-79,-104,-69,-29,90,20,35,119,-87,8,-63,13,-29,75,-109,-71,-55,67,27,-127,21,64,89,87,23,47,52,-62,49,-99,43,92,-34,-14,-72,85,35,-110,95,85,8,75,65,-52,-42,0,-66, 
  /* [8][0][][] */ 17,29,-53,-93,53,33,-75,-37,6,36,44,94,22,-44,-85,-75,-74,98,-68,27,35,-28,77,107,-127,99,48,69,-81,29,-87,123,99,-31,51,-3,105,6,-40,72,83,104,-111,-123,-9,-25,-19,102,23,-95,-57,5,-79,-5,-27,-101,48,107,-91,97,117,20,49,117,-27,-43,-26,102,-77,53,22,1,77,73,-6,14,-41,98,82,71,39,79,-108,-78,27,43,73,-36,40,-35,-100,110,-77,-96,-40,67, 
  /* [9][0][][] */ 8,-2,103,46,111,-95,-55,-115,35,44,-14,44,-35,-77,-113,-28,-1,-10,-99,-76,0,90,-117,-114,114,-20,-22,14,-12,-44,-98,97,58,-5,31,-28,-84,14,-31,-47,40,-76,46,-101,70,11,-99,58,49,-18,-76,-41,74,-74,-77,91,90,-56,-14,-6,-84,97,90,-85,-79,-4,95,45,-37,93,106,-89,4,74,-99,-105,-85,-127,-47,95,24,31,104,20,-54,-95,28,-23,96,26,-40,114,115,-6,63,-45, 
  /* [10][0][][] */ -62,80,85,-68,-43,76,113,20,42,8,25,-88,110,86,-37,7,-48,88,-103,-60,-15,29,56,-75,8,53,-119,-127,-65,79,-98,-82,93,106,127,70,-62,9,-55,38,-35,122,-118,-56,-100,-59,-1,-63,1,-20,44,10,60,25,-64,-32,-102,-15,35,-54,2,59,114,47,119,-79,-102,-20,8,-23,-101,-66,92,66,-100,106,-13,60,70,20,81,1,62,110,-107,73,104,-24,41,11,-18,-72,-53,-54,-44,-70, 
  /* [11][0][][] */ 127,5,-12,88,85,61,45,26,87,63,-53,80,-12,-47,24,-45,-45,-76,43,23,19,57,16,-76,-76,-76,-15,49,58,13,16,-19,-67,-51,68,29,-50,60,-12,-32,-19,72,-56,1,-28,-47,-63,-52,54,76,109,38,-70,-61,11,17,-5,-36,11,-64,-46,61,82,0,23,60,-38,35,83,39,-55,-56,29,83,-48,36,-52,22,-29,66,-81,18,-43,-37,32,-49,6,-24,-72,5,18,-80,-41,-28,-21,-31, 
  /* [12][0][][] */ 6,61,-50,-5,86,1,-38,33,-76,53,-19,13,-53,7,40,-76,-92,-36,-47,-83,18,-13,13,86,-58,-52,86,-90,92,3,-39,99,-86,-70,-49,10,3,-75,-9,33,100,31,-106,-38,-25,-83,-43,105,-47,-96,-78,90,37,-5,-83,71,-22,-60,45,61,47,127,-11,43,97,25,-46,102,46,89,39,61,73,99,-5,-5,-40,32,-112,-91,-59,91,37,6,-38,25,46,99,-92,-106,93,32,88,-19,19,64, 
  /* [13][0][][] */ 112,-57,103,86,100,127,71,46,65,-98,5,-19,100,64,57,-50,-115,-74,-76,43,62,-38,112,-56,-65,54,0,20,-96,-76,87,46,45,98,-24,45,-81,-33,3,63,-65,73,-60,15,-47,30,-2,-44,33,116,-40,-93,-113,25,106,-81,-52,24,-28,-81,-32,114,-65,28,-46,-60,-105,81,-22,-11,87,-9,-97,50,-91,-47,-98,60,74,-62,59,-103,88,31,-77,-105,90,127,-17,-57,-85,70,111,-46,75,4, 
  /* [14][0][][] */ -57,-99,78,58,62,-29,-19,-127,-81,-36,67,80,-37,-84,-91,-93,-57,-58,-3,29,-44,26,-10,57,-117,-70,-33,22,-117,-110,-77,43,102,-24,-43,4,88,116,21,-112,-5,-111,22,85,65,-106,65,-89,113,38,78,55,82,-15,-13,14,-56,-10,47,84,-16,-95,-24,76,-113,-9,68,-114,-86,-106,-104,87,-9,83,34,-82,58,-117,51,24,48,-29,-121,-32,-114,-88,-120,111,107,9,72,-44,81,98,-11,54, 
  /* [15][0][][] */ 24,-30,-35,83,84,-98,69,-99,68,-12,-69,-5,117,9,-89,-118,78,18,-92,18,58,24,77,115,70,55,48,92,18,52,70,-108,11,14,-58,-9,-84,123,112,-63,22,122,-46,-39,31,-78,-39,-76,-2,-99,6,19,-97,-98,-50,1,80,60,-42,113,-37,-80,-9,107,-44,102,-69,11,-71,7,70,-67,25,-20,59,-113,-4,57,115,81,-84,69,-103,-65,-127,-32,-92,37,97,78,-122,-50,64,107,-109,111, 
  /* [16][0][][] */ -59,5,105,-68,50,124,-62,25,43,55,-111,82,-7,-55,-53,-58,112,77,65,79,107,70,-44,52,-32,70,-67,66,-107,27,49,23,-103,73,60,67,-32,61,-69,-74,29,-49,69,95,67,110,112,-28,-60,-102,2,123,-57,112,74,49,19,86,67,10,112,103,46,81,69,22,-48,89,58,103,-44,-16,24,106,53,83,-1,96,-117,-12,24,-91,52,26,19,106,100,21,72,17,-22,127,69,-24,-73,36, 
  /* [17][0][][] */ 29,-118,24,77,-52,-121,-74,-102,37,-95,80,42,94,55,-124,43,26,48,105,109,-102,-20,8,-60,19,62,-86,21,100,-61,-40,71,-39,-30,27,-1,-57,95,-91,-38,-104,-48,-21,-17,0,6,80,-119,80,95,-21,20,-23,74,95,-83,-127,82,-94,-121,26,-107,69,92,-93,-83,37,-112,-119,-9,104,23,9,-127,-74,61,111,-56,36,-66,4,-23,-85,-101,-122,67,75,-41,14,71,-104,-127,-19,91,6,10, 
  /* [18][0][][] */ -94,91,98,-71,-17,-103,-108,4,-11,67,-112,-53,-50,29,57,-67,12,-31,53,-23,96,-52,13,-83,19,-110,-23,101,23,34,-6,44,37,-35,-103,-119,-44,31,-28,59,-47,-8,-51,-18,-122,11,23,-5,10,-33,76,32,-116,-15,4,82,-50,29,-18,-127,80,99,15,29,-70,-124,-37,86,57,-75,-78,103,-103,-49,-98,-113,43,47,-7,-85,-63,-14,-31,-74,95,-39,62,65,-115,-73,-73,111,81,-61,52,-21, 
  /* [19][0][][] */ 17,29,83,41,60,-90,98,104,97,-67,28,-14,-101,32,-60,62,74,-111,121,56,-25,82,-58,12,81,-85,28,-65,-97,-126,-70,44,80,-88,32,-2,8,-74,-33,-106,43,-122,-87,8,-92,28,76,-98,-31,36,-44,44,-24,13,3,-13,22,102,-4,-28,54,-47,100,61,-74,-5,-28,-3,-13,54,81,-54,-66,-127,-60,-79,-27,-117,13,113,57,-120,-33,78,-92,-10,8,-7,90,28,4,62,-37,116,70,-52, 
  /* [20][0][][] */ -7,76,73,110,-89,87,31,80,28,11,-78,-3,-8,102,47,-70,-51,-28,-63,-39,37,-31,-66,-68,80,-82,-99,49,31,6,-43,110,106,59,-11,57,43,-31,8,-99,-84,-25,-77,-104,-24,-64,-70,127,70,-126,-91,34,66,127,50,3,118,85,103,101,126,-45,-74,-41,-35,-70,-35,26,-93,-70,-53,94,-52,-91,48,28,106,89,124,117,83,22,100,-32,58,120,-6,69,33,99,37,59,35,23,-9,2, 
  /* [21][0][][] */ 88,64,57,-99,75,-99,64,5,-4,-83,-73,24,13,33,-56,-93,-112,-28,22,-9,101,-52,59,-88,35,-88,-32,60,-5,8,-10,-21,7,17,-89,-114,86,89,-127,-32,-9,4,22,-31,-96,-81,-77,79,-23,-88,-4,72,25,64,-98,27,-51,47,-48,103,54,-98,3,-9,63,23,-40,-65,-110,-6,49,73,28,-27,51,55,-112,-38,54,96,8,92,31,-69,17,-94,55,-81,-100,69,88,-105,-45,-70,60,-29, 
  /* [22][0][][] */ 25,-44,-59,-85,72,-48,97,41,-77,79,-67,-84,127,-97,-104,-74,35,80,-114,-54,84,-65,30,26,77,4,-96,103,-57,-66,-54,-98,39,55,12,17,4,-15,-64,-100,3,-7,6,83,50,-100,82,-25,-61,-86,-4,-16,-75,-84,-45,33,-25,-20,-20,-27,98,-70,-70,-91,-64,20,-101,-36,95,100,-21,2,-57,4,51,-75,41,-45,59,93,100,-95,-67,-97,74,75,93,-23,-46,29,-53,55,18,22,-28,100, 
  /* [23][0][][] */ 57,-75,10,46,88,-105,-5,-115,51,-75,76,79,41,-107,14,-36,84,-30,-109,105,88,-86,100,-38,-18,-2,80,27,58,52,77,-29,-29,39,9,44,94,-3,-127,1,-95,4,6,-104,-61,-78,114,7,78,-98,-89,-42,61,-59,-50,96,-88,-21,86,38,-109,-98,-42,6,37,40,-121,-109,63,-12,93,-71,-12,-23,-50,-89,48,-21,83,117,-43,-59,16,-85,96,10,109,-13,-88,40,96,3,96,-47,-25,90, 
  /* [24][0][][] */ -55,-35,-92,-47,-73,-123,-51,-85,68,88,76,39,127,61,-34,-101,-70,53,19,-30,102,-67,-43,-34,18,-15,73,51,78,61,9,-43,49,22,66,37,-50,-59,38,-3,-48,-71,83,-5,30,-26,50,65,-34,-43,-4,16,57,71,58,-46,20,76,27,1,99,-20,44,96,-76,85,-37,-59,-91,42,-43,-4,-23,32,97,86,60,-62,-80,-58,-58,-69,-39,-87,7,66,-6,-73,39,-87,2,-52,-2,25,-93,25, 
  /* [25][0][][] */ -53,-47,-44,12,87,-13,-57,83,52,-54,-10,44,38,5,-53,13,-27,51,40,-119,48,112,16,-8,61,-38,-88,48,104,-99,46,95,73,-101,67,58,127,-43,13,-10,-65,94,-79,42,101,43,70,61,-91,94,-82,20,59,-34,-37,-1,-26,47,-88,103,88,95,36,24,10,90,19,-6,-75,2,-8,-113,44,-95,81,43,65,96,35,15,58,45,-50,70,-43,-32,-74,-81,-25,-6,119,-3,-114,38,-1,-76, 
  /* [26][0][][] */ 51,-110,-33,-15,-52,27,-14,-21,-99,-127,93,62,-71,-45,4,-16,88,25,-81,-44,10,58,82,5,35,59,8,30,-8,37,-85,2,-26,-55,-87,-98,-80,76,-56,96,-89,89,45,20,-66,64,-36,86,-21,6,-3,95,-3,-40,-7,-97,90,56,40,17,2,-114,71,-17,108,-21,-57,50,-51,64,69,84,67,-78,-82,-3,41,-105,-90,9,-28,70,71,-66,68,-2,-45,13,-77,99,-3,41,-47,96,49,75, 
  /* [27][0][][] */ 8,6,-71,-110,-108,-76,-77,-19,41,106,35,-116,-33,55,82,-34,64,-21,62,-91,-102,7,-34,-29,-97,44,-118,-8,64,28,-38,-14,60,68,-99,-93,-97,-72,-117,88,-103,14,26,16,99,22,67,104,90,70,58,-82,-98,-93,-11,-40,105,-29,-122,-85,-64,-66,-40,51,39,-53,-121,106,47,7,-127,4,60,-59,-10,-96,46,-72,88,105,84,-32,117,-63,-82,-91,-39,28,-55,-8,-39,-57,55,14,87,55, 
  /* [28][0][][] */ 90,-12,81,41,-124,-59,-106,-84,-45,-119,54,70,-80,-94,-5,97,88,107,-78,81,-34,17,-120,-83,-127,75,-95,-68,-73,-77,-10,-29,-115,9,91,65,10,-119,-46,25,99,36,-102,44,-121,-18,7,42,16,-64,-81,-41,-89,15,46,30,62,-20,82,46,-10,-52,-103,-5,53,69,-29,80,-87,23,-109,-51,65,27,-10,-110,-125,-74,-96,39,-85,-100,110,-39,55,-122,60,-91,-113,-77,-39,-76,-49,48,-90,-76, 
  /* [29][0][][] */ 50,60,69,-49,-76,10,-115,24,101,-9,-88,-88,94,-102,-44,-40,-90,101,35,-71,-77,-29,61,10,-18,5,-44,-17,-84,-13,104,-7,49,2,-81,-50,6,102,17,95,48,107,-41,91,1,104,-55,-18,18,1,54,-97,90,-101,111,44,-93,58,-50,118,-120,127,-98,-56,-63,-63,58,89,92,-84,45,-73,112,75,82,36,112,-52,-27,37,-6,-81,-10,-80,65,116,48,76,-38,97,92,75,-104,17,-5,57, 
  /* [30][0][][] */ 22,-74,-71,30,-101,18,-73,-21,112,-22,-9,-44,-103,15,52,11,-12,30,95,-111,40,-110,-122,6,-117,17,-76,118,-14,-111,-100,-1,-87,-79,-127,-62,9,-25,-9,19,84,-83,-19,93,99,-50,97,54,-78,76,17,-111,96,-59,-18,97,-84,-57,-84,-57,-109,-10,-81,-29,-115,-96,-104,89,-67,108,48,-36,-92,101,34,-93,-61,-80,-84,-66,23,27,-109,-23,-116,22,-112,107,-42,-126,76,55,-35,-11,3,-75, 
  /* [31][0][][] */ 66,-71,38,106,46,50,-50,-79,-18,-18,-66,-73,127,-98,-40,93,-51,-74,72,38,51,30,-25,86,39,-95,29,40,-61,-62,38,88,16,17,-76,-2,80,-27,-36,-91,48,-56,-26,25,3,-46,-34,19,59,19,77,-26,-80,-48,-68,18,-97,75,1,96,-33,3,69,-63,56,91,-36,-63,58,-100,-92,11,-81,-36,2,14,-50,-37,41,96,-63,-22,45,58,45,78,-73,13,14,-44,-67,-47,10,84,-5,-22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017253718106076121, 0.0018556930590420961, 0.0019546062685549259, 0.0017585953464731574, 0.0020529627799987793, 0.0016853867564350367, 0.0018994801212102175, 0.0018351762555539608, 0.0018368554301559925, 0.0018386595183983445, 0.001754411612637341, 0.0025184922851622105, 0.0019787459168583155, 0.0018229699926450849, 0.0018556076101958752, 0.0017559869447723031, 0.0018078851280733943, 0.0017996308160945773, 0.0018044286407530308, 0.0017503239214420319, 0.0017830326687544584, 0.0019336136756464839, 0.0020569195039570332, 0.0019226287258788943, 0.0021657550241798162, 0.0020373200532048941, 0.0020391910802572966, 0.0017355349846184254, 0.0017642499879002571, 0.001816583564504981, 0.0017794201849028468, 0.0022306125611066818, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1942, 2536, 6527, 2674, -3533, -3214, 15940, 1675, 2491, -1453, 8165, -271, -4508, 1738, 12650, 5316, 14477, 4023, -3342, -4741, 3198, 29107, 19627, 14697, 975, 756, 3237, 1958, 1770, -3825, 5298, -2009, -236, 3879, 39, 666, 8575, 3363, -1266, 4227, 4987, 4798, 4155, 9043, 3368, 3724, 1231, 5573, 4022, -4299, -5547, 326, -143, -1021, 1835, -18, 162, -786, -3376, 9930, -812, 1265, -1082, -1561, -3043, 4619, 19127, 1707, -1804, 590, 1242, 1689, 1269, -975, 624, 7135, -416, 16586, 15118, -783, 6669, 1586, -417, 1002, 9121, 6362, 3341, 947, 4630, 3170, -137, -5380, 526, -1760, -1428, -1581, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00033258553594350815, 0.00062286941101774573, 0.00036526328767649829, 0.00032929170993156731, 0.00029874983010813594, 0.00045801280066370964, 0.00020827382104471326, 0.00043388275662437081, 0.00024367326113861054, 0.00045318648335523903, 0.00024039593699853867, 0.00034425361081957817, 0.00056093023158609867, 0.0016121543012559414, 0.00024481044965796173, 0.00022030009131412953, 0.00012912091915495694, 0.00035942843533121049, 0.00058177148457616568, 0.00035629607737064362, 0.00019333462114445865, 9.2252033937256783e-05, 0.00015600913320668042, 0.00011425197590142488, 0.0001999639644054696, 0.00063319416949525476, 0.0009188674739561975, 0.0005475067300722003, 0.00030409489409066737, 0.00051406066631898284, 0.00027811276959255338, 0.00038532624603249133, 0.00023622704611625522, 0.00029809607076458633, 0.00051006919238716364, 0.00036684691440314054, 0.00022329830972012132, 0.00031817733542993665, 0.00044229894410818815, 0.00041764523484744132, 0.00025683233980089426, 0.0005406751879490912, 0.00036479538539424539, 0.0002587063645478338, 0.00057058152742683887, 0.00027094691176898777, 0.00039925813325680792, 0.00038586670416407287, 0.00033391694887541234, 0.00029694160912185907, 0.00028753560036420822, 0.00023857713676989079, 0.000645793741568923, 0.00030229034018702805, 0.00042448713793419302, 0.00040672795148566365, 0.00062334066024050117, 0.00036244187504053116, 0.00045735598541796207, 0.00018706166883930564, 0.0009129816316999495, 0.00056784262415021658, 0.00026013061869889498, 0.00051106349565088749, 0.00061825179727748036, 0.00041356278234161437, 0.00011413985339459032, 0.00022802560124546289, 0.0006238901405595243, 0.00049085193313658237, 0.00029635883402079344, 0.0003025632759090513, 0.001038629561662674, 0.00042483245488256216, 0.00029807310784235597, 0.00030317262280732393, 0.00033180191530846059, 0.00011311002890579402, 0.00012040560250170529, 0.00023639579012524337, 0.00021920748986303806, 0.00020874182519037277, 0.00022042507771402597, 0.0002421144163236022, 0.0002012311015278101, 0.00037507747765630484, 0.00069273996632546186, 0.0003067661018576473, 0.00015384689322672784, 0.0006531400722451508, 0.00032914799521677196, 0.00036517533590085804, 0.00040062976768240333, 0.00059288454940542579, 0.00044438161421567202, 0.00026837113546207547, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -37,100,5,-127,-40,-26,-35,-71,-26,11,-7,73,28,-53,-17,56, 
  /* [1][0][][] */ -32,24,-69,-8,-33,-34,19,-79,51,60,-64,21,-2,-6,47,-127, 
  /* [2][0][][] */ -2,9,-50,59,29,35,-39,-88,127,-59,-31,-6,-16,125,-81,24, 
  /* [3][0][][] */ 46,-63,11,-108,15,-25,1,4,127,8,87,53,-9,42,17,125, 
  /* [4][0][][] */ -122,87,15,39,14,-17,-8,37,-17,-7,7,-46,-127,-35,-27,66, 
  /* [5][0][][] */ -9,91,126,-3,17,84,-96,81,-71,76,-29,-48,47,-60,-127,32, 
  /* [6][0][][] */ 54,-60,114,-127,37,-5,-53,110,-78,-98,46,-27,4,99,-18,83, 
  /* [7][0][][] */ 33,111,-19,-53,94,17,6,-38,127,93,-18,26,38,-16,55,39, 
  /* [8][0][][] */ 13,-92,6,-88,19,-59,12,-77,19,54,64,-14,21,127,81,63, 
  /* [9][0][][] */ 15,-30,1,127,47,-9,33,-53,-56,114,40,-16,-10,-56,-11,-14, 
  /* [10][0][][] */ -17,25,-47,-127,5,4,-3,29,23,-45,7,-35,-15,-50,-6,32, 
  /* [11][0][][] */ 2,20,13,-20,75,-30,92,-70,-91,24,-15,19,8,127,-65,-22, 
  /* [12][0][][] */ 52,-13,-127,-14,15,-68,11,1,-2,43,-86,-40,-46,90,10,24, 
  /* [13][0][][] */ -11,11,-23,9,7,-127,-5,19,2,-15,11,-4,8,-13,6,10, 
  /* [14][0][][] */ 19,-21,106,-27,71,12,-127,-89,-11,-38,41,32,8,-63,-25,-40, 
  /* [15][0][][] */ -76,16,-19,-53,-6,5,127,37,-37,43,86,-32,-3,74,68,6, 
  /* [16][0][][] */ 20,67,127,93,-8,16,98,64,-105,-1,-86,-20,2,8,9,-77, 
  /* [17][0][][] */ -31,-102,-14,27,-71,-22,-57,10,-127,-36,7,-50,1,38,52,-34, 
  /* [18][0][][] */ -7,45,13,68,47,11,27,3,80,48,-22,-33,10,127,54,17, 
  /* [19][0][][] */ 2,-3,30,5,89,26,-77,-76,-103,-84,-50,-127,-26,-46,7,-24, 
  /* [20][0][][] */ 85,-44,-72,-42,-3,-115,3,13,-65,21,-127,-31,13,8,33,11, 
  /* [21][0][][] */ 80,-6,111,-11,3,24,21,126,14,-103,127,27,-1,122,41,90, 
  /* [22][0][][] */ -24,53,-43,127,-59,10,96,55,-21,20,-35,22,22,8,24,4, 
  /* [23][0][][] */ 80,-3,103,-95,56,-19,-14,44,0,5,-15,-48,16,-19,-127,33, 
  /* [24][0][][] */ -127,35,10,-13,6,106,25,-17,2,26,110,-3,-87,23,65,-36, 
  /* [25][0][][] */ 25,23,12,19,9,7,63,-54,-8,-127,-21,-25,-6,-32,13,23, 
  /* [26][0][][] */ -40,-10,0,11,-45,-10,-40,-33,-104,-39,-2,-26,23,127,-38,55, 
  /* [27][0][][] */ 0,28,5,63,36,-31,-20,-37,51,7,-30,-4,6,127,-7,16, 
  /* [28][0][][] */ 19,57,65,63,127,-7,19,44,-77,-12,-39,-24,5,89,40,-40, 
  /* [29][0][][] */ 6,-7,2,13,25,-6,1,33,-21,-12,-26,-127,-5,-17,-14,5, 
  /* [30][0][][] */ -23,84,-45,76,-36,-14,47,-127,-38,59,-10,1,57,40,75,81, 
  /* [31][0][][] */ -43,-27,-6,-71,1,6,-51,-121,31,95,-3,-127,-41,-53,-1,19, 
  /* [32][0][][] */ -127,-88,-15,58,50,32,-22,13,-10,-51,-117,51,74,5,68,78, 
  /* [33][0][][] */ -14,-42,-52,-12,-105,-18,-97,-6,62,12,5,-60,39,-122,127,39, 
  /* [34][0][][] */ 43,-11,60,20,40,13,-51,77,-85,-49,61,17,17,-10,-14,127, 
  /* [35][0][][] */ -28,50,-78,17,-18,-24,32,-127,84,84,-94,-6,0,6,83,-122, 
  /* [36][0][][] */ -43,29,2,127,27,15,115,1,-22,33,-36,-20,-21,-3,-55,-31, 
  /* [37][0][][] */ 18,-15,12,-77,7,-9,-51,-43,-76,0,2,-2,12,-127,67,-35, 
  /* [38][0][][] */ 48,74,-15,-71,127,-15,24,-42,118,72,-11,9,18,-30,60,19, 
  /* [39][0][][] */ -33,67,-5,-127,-18,13,-37,28,39,-79,-30,-24,20,68,39,35, 
  /* [40][0][][] */ -1,-24,13,-84,-4,-18,-12,-25,-127,-7,-16,-27,-9,-97,80,-55, 
  /* [41][0][][] */ -16,-19,-47,-21,-1,-37,13,-14,-37,11,-55,-15,-127,6,29,38, 
  /* [42][0][][] */ 127,97,-26,-22,-77,-51,-18,-69,4,27,101,-60,-64,42,102,-123, 
  /* [43][0][][] */ -36,107,-66,-7,54,-12,122,-48,43,65,-35,-10,44,-127,-77,-46, 
  /* [44][0][][] */ -35,-15,-1,-42,44,-3,-77,-127,-24,-16,3,-2,-7,-39,68,-54, 
  /* [45][0][][] */ -25,56,-127,-35,35,-68,36,-84,19,40,17,-84,39,-39,49,-29, 
  /* [46][0][][] */ 8,2,-19,-86,-18,15,28,-38,-127,-30,1,8,-11,-124,66,-34, 
  /* [47][0][][] */ 9,55,23,-22,127,-18,-32,14,-65,38,-12,21,9,-6,124,-18, 
  /* [48][0][][] */ -127,-90,-32,40,65,7,1,-15,5,-11,-110,51,59,16,91,46, 
  /* [49][0][][] */ 5,-2,95,71,106,-5,46,26,-127,-58,-39,-72,22,122,16,-48, 
  /* [50][0][][] */ 40,-15,-85,-5,36,-127,-34,-22,-12,-15,6,-33,46,-16,-14,2, 
  /* [51][0][][] */ -3,36,37,8,22,4,5,16,-127,49,0,-111,5,-101,-20,91, 
  /* [52][0][][] */ -14,64,7,49,50,-7,17,50,71,110,-25,-54,23,127,90,25, 
  /* [53][0][][] */ -2,-56,-24,-20,-97,-15,-93,9,43,17,5,-64,37,-127,126,22, 
  /* [54][0][][] */ 39,-7,-36,14,127,84,-102,-37,-71,-5,-24,-78,5,-40,-21,-42, 
  /* [55][0][][] */ 53,-5,9,6,43,-38,-70,-127,-30,-66,-49,17,-5,-24,14,-11, 
  /* [56][0][][] */ -20,10,21,-25,-10,-31,-101,67,-14,127,-11,-18,34,3,-1,12, 
  /* [57][0][][] */ 5,21,-42,-16,-46,-44,127,87,-22,30,-10,-4,28,29,112,-13, 
  /* [58][0][][] */ 56,21,-127,41,101,105,-33,63,-99,-41,3,17,-27,31,-5,-29, 
  /* [59][0][][] */ -91,63,102,18,-74,-66,115,127,24,9,28,-10,14,15,73,2, 
  /* [60][0][][] */ 5,-5,-57,-5,14,-127,-23,-8,-16,-25,-18,-30,27,-13,6,12, 
  /* [61][0][][] */ 15,-11,24,127,72,20,32,7,-91,-8,12,34,-9,21,31,-50, 
  /* [62][0][][] */ -50,127,15,-52,-34,-11,-75,51,-29,-69,-96,-66,-5,-97,-54,-34, 
  /* [63][0][][] */ -39,29,-25,127,-75,14,-68,-40,-60,-27,-36,-48,27,66,36,37, 
  /* [64][0][][] */ 5,6,8,44,8,12,-11,67,30,6,-6,-39,-11,-127,47,-5, 
  /* [65][0][][] */ -15,-36,12,-118,45,-33,77,-38,-19,36,-3,-127,-6,5,12,-46, 
  /* [66][0][][] */ 44,-12,79,-14,17,7,-12,127,21,-60,81,49,0,113,19,63, 
  /* [67][0][][] */ -2,60,-12,-127,-9,2,-54,37,88,-108,-25,-10,37,86,72,33, 
  /* [68][0][][] */ -42,46,127,7,5,12,3,-8,-49,-27,-15,-43,16,-25,87,-25, 
  /* [69][0][][] */ 127,82,-5,5,-76,-26,-19,-25,13,24,94,-54,-58,63,55,-98, 
  /* [70][0][][] */ 41,10,-53,-7,-27,32,64,127,-32,94,-36,1,19,75,-31,16, 
  /* [71][0][][] */ 11,-6,-7,7,4,-82,-5,32,-31,24,-71,11,-127,0,45,47, 
  /* [72][0][][] */ 21,19,-127,21,22,19,22,115,-37,-16,12,-4,22,25,-8,1, 
  /* [73][0][][] */ -49,31,38,2,42,-26,-67,-127,14,-77,29,-22,18,-47,30,-11, 
  /* [74][0][][] */ 2,21,35,127,11,-15,-105,94,-83,5,-66,57,19,-117,47,-93, 
  /* [75][0][][] */ -7,23,-55,7,13,-13,9,2,107,25,-19,1,22,127,-35,7, 
  /* [76][0][][] */ 4,-20,3,23,7,-18,-16,69,21,-25,-15,-127,-10,-3,6,8, 
  /* [77][0][][] */ -17,35,-23,127,-59,16,87,99,2,31,-20,26,-5,-21,-7,-7, 
  /* [78][0][][] */ 11,-5,22,-127,42,-42,-50,34,14,-61,-7,-56,24,125,27,54, 
  /* [79][0][][] */ -6,-103,-86,-66,-94,-11,19,-86,127,12,23,51,19,55,50,-48, 
  /* [80][0][][] */ -38,12,101,-91,6,-25,34,-110,-76,30,-69,-127,33,92,65,-34, 
  /* [81][0][][] */ -41,42,-127,24,66,-125,-18,52,-9,-46,60,-4,28,-1,12,-2, 
  /* [82][0][][] */ 127,-4,-2,20,17,-105,-13,20,-13,-7,-95,-4,108,9,-9,20, 
  /* [83][0][][] */ -44,82,-105,-73,-33,-10,54,-125,57,39,-46,-127,19,45,45,97, 
  /* [84][0][][] */ -32,16,51,-39,-4,-32,46,-127,-42,34,-18,-45,29,43,65,5, 
  /* [85][0][][] */ -83,124,23,-127,-81,-35,-32,-5,-63,-8,-80,19,7,-9,-91,-25, 
  /* [86][0][][] */ -9,8,-26,6,-27,-24,127,17,0,-28,-7,3,13,31,76,-20, 
  /* [87][0][][] */ -28,-38,5,-117,11,-32,57,-15,-2,20,-6,-127,-20,5,8,-42, 
  /* [88][0][][] */ 111,-36,45,-18,29,-127,-9,29,-68,34,-122,-67,49,29,86,7, 
  /* [89][0][][] */ 29,-22,-37,-61,35,-18,-35,-1,-42,16,42,-60,127,-13,33,-40, 
  /* [90][0][][] */ -10,-41,43,-52,74,4,-66,85,52,-84,-36,-25,-13,96,12,-127, 
  /* [91][0][][] */ -48,0,-12,-45,13,-7,-22,-87,-1,49,-15,-127,-19,-20,-5,23, 
  /* [92][0][][] */ -27,24,42,19,1,-127,17,-2,3,-24,-3,-16,1,-22,17,4, 
  /* [93][0][][] */ 41,-21,127,-8,-44,58,24,-23,-16,30,-61,-14,-24,1,32,0, 
  /* [94][0][][] */ 29,5,-11,-18,29,-2,-10,-5,-28,-15,18,-59,127,-15,26,-34, 
  /* [95][0][][] */ 127,80,-4,34,-91,-16,-55,-13,-22,-18,73,-43,-47,36,69,-72, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00070771208265796304, 0.0013254100922495127, 0.00077724742004647851, 0.00070070312358438969, 0.00063571275677531958, 0.00097461004042997956, 0.00044318794971331954, 0.0009232634911313653, 0.00051851477473974228, 0.00096434005536139011, 0.00051154091488569975, 0.00073254067683592439, 0.0011936090886592865, 0.0034305192530155182, 0.00052093458361923695, 0.00046877877321094275, 0.00027475770912133157, 0.00076483137672767043, 0.0012379573890939355, 0.00075816595926880836, 0.00041139867971651256, 0.00019630402675829828, 0.00033197339507751167, 0.00024311791639775038, 0.00042550533544272184, 0.0013473802246153355, 0.0019552672747522593, 0.0011650450760498643, 0.00064708659192547202, 0.0010938748018816113, 0.00059179897652938962, 0.00081993959611281753, 0.00050266989273950458, 0.00063432159367948771, 0.0010853813728317618, 0.00078061723615974188, 0.00047515871119685471, 0.00067705271067097783, 0.00094117235857993364, 0.00088871148182079196, 0.000546516093891114, 0.0011505081783980131, 0.00077625177800655365, 0.00055050384253263474, 0.0012141461484134197, 0.00057655066484585404, 0.00084958539810031652, 0.0008210896048694849, 0.00071054522413760424, 0.00063186499755829573, 0.00061184988589957356, 0.0005076706875115633, 0.0013741909060627222, 0.00064324663253501058, 0.00090327044017612934, 0.00086548045510426164, 0.0013264127774164081, 0.00077124370727688074, 0.00097321235807612538, 0.00039805038250051439, 0.0019427427323535085, 0.0012083180481567979, 0.00055353454081341624, 0.0010874971048906446, 0.0013155841734260321, 0.00088002439588308334, 0.0002428793377475813, 0.00048521795542910695, 0.0013275820529088378, 0.0010444887448102236, 0.00063062494155019522, 0.00064382742857560515, 0.002210110193118453, 0.00090400525368750095, 0.00063427275745198131, 0.00064512406243011355, 0.00070604460779577494, 0.00024068796483334154, 0.00025621228269301355, 0.00050302897579967976, 0.00046645381371490657, 0.00044418382458388805, 0.00046904472401365638, 0.00051519769476726651, 0.00042820165981538594, 0.00079813110642135143, 0.0014740882907062769, 0.00065277062822133303, 0.00032737234141677618, 0.0013898232718929648, 0.00070039730053395033, 0.0007770602242089808, 0.00085250410484150052, 0.0012616049498319626, 0.00094560411525890231, 0.0005710695986635983, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8265, 16108, -19098, -2963, -7037, 14189, 30730, -52226, 387, 18512, 25402, 13755, -10124, 13928, -8773, 7310, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00079044286394491792, 0.0004329486982896924, 0.00020707654766738415, 0.00023766553204040974, 0.00036706222454085946, 0.00037566196988336742, 0.00035506283165886998, 0.00030800324748270214, 0.00037751096533611417, 0.00026279018493369222, 0.00074457185110077262, 0.00056383106857538223, 0.00037804944440722466, 0.00021472932712640613, 0.00052095181308686733, 0.00050780182937160134, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -24,-16,-1,-36,17,-2,-37,-3,13,6,-5,9,-10,-6,-31,6,5,12,0,-7,8,-32,10,4,8,10,-1,127,37,-36,47,-7,2,10,4,1,-13,13,-30,-3,-14,4,5,44,3,11,21,2,28,0,-9,12,20,-24,-13,80,7,5,-26,-41,-4,21,-6,-21,-39,-62,-25,38,11,6,15,-17,-9,-36,1,-24,-32,17,5,12,-13,-25,33,25,1,-13,-13,-93,7,-19,11,0,51,-28,-39,-11, 
  /* [1][0][][] */ 27,-72,-77,-51,127,-9,63,44,-28,-80,-48,-20,-3,-13,-60,51,-58,13,24,38,31,28,-10,-49,6,-5,-12,-69,37,-11,-54,28,-25,35,1,6,4,-12,5,11,-25,38,-34,-12,-31,73,14,4,26,-64,7,-31,-14,36,41,11,-44,-28,-25,-32,29,-20,-18,-37,-69,103,-31,-27,-2,-33,-12,12,45,-102,-23,7,20,-38,48,14,9,-24,30,9,-54,27,-23,25,22,-44,3,0,32,1,34,79, 
  /* [2][0][][] */ -19,69,-86,-2,82,92,25,65,0,-116,12,-3,8,4,34,15,11,-22,-60,65,29,4,74,27,59,43,-19,-39,41,-11,58,-68,36,37,-19,47,-127,-68,46,24,11,-54,12,-24,15,-50,7,73,-16,32,-20,-22,103,-5,-10,45,41,16,31,11,22,23,37,-28,9,-6,-29,-14,-28,8,-28,-45,-64,-82,25,79,63,41,25,-1,24,-36,20,-26,-29,29,20,39,-4,32,2,-19,-3,-50,-59,8, 
  /* [3][0][][] */ 59,30,96,-11,39,-32,12,-23,-21,-73,12,-29,11,33,41,82,16,-9,40,8,115,-3,36,13,60,-19,-18,22,21,47,8,90,-103,14,36,-1,-17,-15,10,57,-78,-33,67,6,14,50,-54,-90,-49,-37,-47,39,5,-127,5,22,-113,79,49,37,6,104,-15,-51,23,63,-2,-52,35,-17,-4,-54,44,-28,64,-11,9,2,40,37,-37,-81,27,-28,-20,14,27,39,35,21,13,39,43,108,41,-28, 
  /* [4][0][][] */ 12,-10,13,1,127,56,-5,-25,-38,-61,-42,-14,-48,30,-11,47,24,-84,-38,87,-18,-3,49,-17,-14,6,4,-61,-1,-14,70,-41,89,29,-27,13,47,37,27,2,-29,-5,-55,-22,2,-64,-20,8,49,17,-31,24,-4,-45,3,-38,42,-19,-42,35,3,61,58,36,44,61,-24,-10,-39,0,41,87,16,-63,-44,-16,14,30,96,-48,-11,-43,25,-24,-73,-1,36,53,-40,28,8,-50,19,4,38,-12, 
  /* [5][0][][] */ -1,-9,-24,10,19,-12,37,-36,-29,-47,-7,15,6,21,-6,4,-1,7,13,-13,29,15,-33,65,13,3,6,-118,-1,36,25,34,-1,-1,8,-54,24,34,5,6,-2,-11,29,-24,-12,-13,10,-29,-15,-11,12,-15,3,-36,-8,-59,5,11,-18,12,66,7,-6,47,2,55,0,66,16,93,7,28,1,9,3,78,-41,-15,11,22,-16,-10,14,16,-5,12,-22,127,11,20,-7,-8,12,10,-53,27, 
  /* [6][0][][] */ 17,-71,7,-47,-35,18,30,20,-4,3,-10,-68,-37,-6,-38,41,28,4,-3,-6,-48,35,21,3,-15,-4,-22,-18,-9,18,46,-2,68,5,62,-1,-12,-13,26,-95,-18,79,8,-30,9,-38,-25,11,-12,32,-33,76,-14,-69,-9,-12,0,-73,1,-4,-17,54,26,-70,43,-25,-2,-17,3,-9,127,2,-50,0,-20,35,-97,2,14,7,25,43,24,10,-18,-7,31,21,13,-2,42,-30,-6,-11,-40,-12, 
  /* [7][0][][] */ 7,127,50,21,106,45,40,-46,-20,-32,30,-10,-17,26,24,7,2,-48,11,27,34,-26,30,17,-8,23,14,11,14,-30,15,18,38,-12,-39,4,23,23,-7,86,-48,30,12,7,-18,-4,30,-15,-23,-23,35,-1,17,-33,-39,38,44,9,-23,6,-21,-37,13,-6,-70,66,-25,-77,-13,-28,-5,60,-4,-21,7,14,66,53,32,-28,-42,-29,-16,-27,-17,57,0,0,-17,35,-36,-36,-44,-8,25,7, 
  /* [8][0][][] */ -17,11,44,19,-127,-15,39,-20,18,73,55,26,-8,15,18,-2,-39,19,24,-7,-40,-4,-85,59,16,-17,45,-22,11,4,-5,40,69,-19,-1,-7,-28,-7,21,33,10,-30,44,5,-43,-4,40,-3,-85,13,17,37,-49,-41,-28,33,11,-50,-75,-21,12,-37,-32,3,-10,83,2,-57,31,-17,-42,-13,25,50,57,9,-37,-42,-22,21,-80,6,3,-10,28,17,49,54,26,-42,43,50,-1,1,34,16, 
  /* [9][0][][] */ -5,-92,4,38,80,79,-24,-41,29,-48,85,101,0,8,107,-111,7,-20,-7,-1,-58,-48,26,-13,-28,31,-13,14,-40,1,17,-9,19,9,-105,18,-2,33,5,70,28,-78,-16,54,-6,-2,-74,-31,45,39,-11,-97,51,24,-30,-66,-10,101,-35,2,7,-65,-36,127,-106,-5,13,-19,-8,43,-62,-71,49,6,-11,32,63,-76,13,-5,-4,-16,25,11,2,-59,34,7,16,-28,-56,40,-70,0,10,-26, 
  /* [10][0][][] */ -50,-21,-37,-44,-28,-3,59,-22,26,21,18,34,30,-6,-13,-13,-10,19,-21,-16,-9,29,24,21,-11,-9,0,-127,21,-41,52,-30,0,22,1,0,-8,34,12,-11,4,-28,20,-37,13,-13,21,7,-3,34,-30,-14,-31,-24,-11,-50,21,7,0,-42,14,3,-13,14,-37,86,-19,-38,23,-33,-5,-12,-42,-5,27,50,-17,33,-17,11,-26,-9,22,13,7,-25,-18,102,5,-9,14,19,19,-40,37,-33, 
  /* [11][0][][] */ -82,26,4,6,10,-58,-16,-9,-42,-12,-6,21,37,18,-20,-22,43,12,-46,-49,15,-7,-8,5,66,16,50,-1,-27,20,-37,14,-14,13,-4,-9,-7,21,26,13,-21,-7,-2,0,71,26,67,17,46,39,-4,30,7,-59,22,-7,-62,-11,-37,-37,-13,-8,-4,20,-18,-28,34,4,18,14,-2,36,-27,24,23,7,-14,78,-127,60,-42,-9,-58,-79,125,20,40,-12,14,48,-33,-54,-21,43,-24,10, 
  /* [12][0][][] */ -9,-9,-37,1,62,25,6,-21,-15,20,22,2,3,-12,28,-18,-37,-19,26,-21,-10,-14,-34,43,-26,45,-24,97,-17,24,-35,2,-13,29,4,21,-17,-10,22,16,5,-17,1,-4,-14,8,21,20,0,-8,-2,-31,-28,7,-7,-7,-13,-14,9,19,-22,-22,13,53,30,-82,11,62,-28,-127,-12,59,11,14,2,77,6,-19,0,-4,4,19,-38,-1,10,-9,-1,-43,-12,16,15,2,-41,40,-12,24, 
  /* [13][0][][] */ -78,64,-1,-20,-60,2,-11,0,-54,-30,53,26,88,11,-34,6,-6,28,-40,-23,14,-7,50,-51,66,29,2,8,8,-23,-22,-94,-91,-30,7,-2,-5,13,49,-7,-40,79,20,3,35,16,2,-5,76,-27,40,72,65,-79,78,-17,-33,51,36,-2,12,47,-16,25,10,-21,7,17,11,26,21,-127,23,-32,-84,6,54,53,-53,-27,92,-19,-12,-33,45,-44,88,22,-16,-3,-21,24,53,-29,-38,13, 
  /* [14][0][][] */ -23,13,-10,-54,38,-3,-11,35,-84,8,21,4,-34,-55,-74,-14,-88,-24,70,14,27,0,14,-104,-34,9,-41,-10,15,-20,-14,-27,-63,-25,17,9,-18,-12,-5,0,3,79,-68,-8,-45,28,5,12,127,-30,24,-9,29,57,-93,26,-28,25,-98,12,11,27,51,20,8,29,-4,12,-50,20,55,29,41,-15,-25,17,64,-68,-24,-96,24,-30,-2,47,25,-60,-37,12,-48,22,38,45,8,42,15,-22, 
  /* [15][0][][] */ -35,-74,-3,-38,4,10,-5,-62,-18,18,-2,-20,44,-16,52,-12,-95,-12,-29,9,-16,10,-78,-36,-14,-1,-6,29,-24,-10,73,-90,-10,21,21,8,-4,14,-100,10,29,-68,-4,22,-29,-51,53,37,55,24,-6,-127,-4,53,-4,35,38,-4,-21,49,19,6,49,-3,12,-11,-7,-8,-26,28,5,29,-40,1,-7,-35,-26,-6,4,4,-5,52,-20,64,-12,-40,-26,-30,-39,70,25,76,-33,-7,2,-12, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.03359382227063179, 0.018400318920612335, 0.0088007533922791481, 0.010100784711539745, 0.015600143931806087, 0.01596563309431076, 0.015090170316398144, 0.013090137392282486, 0.016044216230511665, 0.011168582364916801, 0.031644303351640701, 0.023962819948792458, 0.016067100688815117, 0.0091259963810443878, 0.022140452638268471, 0.021581577137112617, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 18661, 62377, -598, 394, 15039, -3401, 816, -841, 4662, 10688, -3219, -321, 479, 5834, 4684, -9553, -4168, -922, -749, 16577, -12243, 13583, -2852, 5640, 27708, 306, -6739, 17385, 14172, -18856, 1300, 22184, 23169, -10646, 2938, 808, -104, -590, 4320, -7158, -6059, -820, -6717, -361, 31001, -1562, 12838, -1775, -14089, 1034, 55, 83, -1566, 15244, -2973, 16750, 16857, 198, 34315, -3, -8668, -1055, 1095, -284, -2017, 14059, -1100, -7503, -2834, 3145, 332, -4642, 1459, 514, -1572, -6178, -397, -656, 43847, -8860, -6937, -11817, -565, 228, 65305, -12434, -9336, -27986, -8129, 9788, -2667, 37867, -35, -2312, -2912, 1011, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012824723671656102, 9.1394751507323235e-05, 0.00012956811406183988, 0.00023853946186136454, 0.00023425793915521353, 0.00023595649690832943, 4.6877921704435721e-05, 9.6990661404561251e-05, 0.00026898438227362931, 0.00022617622744292021, 0.00027602785849012434, 0.0001151419201050885, 0.00026195548707619309, 0.00021203917276579887, 0.00042816821951419115, 0.0001696707186056301, 0.00017968546308111399, 0.00015480599540751427, 0.0001917437621159479, 6.845890311524272e-05, 6.0546488384716213e-05, 3.80052333639469e-05, 0.00013652708730660379, 0.00012731210154015571, 9.2927271907683462e-05, 0.0001036503745126538, 0.00016071548452600837, 0.00017676973948255181, 7.383950287476182e-05, 0.00051600072765722871, 0.00039330808795057237, 0.0002559259592089802, 0.00011790592543547973, 0.00014810699212830514, 0.00027025604504160583, 0.00049904658226296306, 0.00038530788151547313, 0.0002177087590098381, 0.00027941280859522521, 9.9089171271771193e-05, 0.00021955130796413869, 0.0002157611888833344, 0.00035906393895857036, 6.6002758103422821e-05, 0.00038256132393144071, 0.00010474651207914576, 0.00011906854342669249, 0.00032216007821261883, 0.00069659907603636384, 0.00011636245471891016, 0.00052932475227862597, 0.00017153311637230217, 0.00031773478258401155, 0.00018192635616287589, 0.00028323521837592125, 0.00010923960508080199, 0.00016466643137391657, 0.00050401972839608788, 4.4469605199992657e-05, 0.00017239879525732249, 0.00030601050821132958, 0.00030570715898647904, 0.0001194668875541538, 0.00014917925000190735, 0.00013858482998330146, 0.00012828371836803854, 0.00029052374884486198, 0.00028705771546810865, 0.00021178759925533086, 0.00012436657561920583, 0.00024880687124095857, 9.9336459243204445e-05, 0.00030815528589300811, 0.00014000154624227434, 0.00043382617877796292, 0.00029881612863391638, 0.00014680733147542924, 6.6623753809835762e-05, 5.8044923207489774e-05, 0.00013653063797391951, 0.00021287225536070764, 0.00023775114095769823, 0.0001492241135565564, 0.00028504934743978083, 5.4239670134847984e-05, 0.00012315901403781027, 7.54881402826868e-05, 0.00051271886331960559, 0.00024305045371875167, 0.00012960833555553108, 0.0003337343514431268, 2.6774678190122359e-05, 0.0001531237066956237, 0.00011540035484358668, 0.00033022832940332592, 0.00030927587067708373, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -48,-73,-12,127,22,71,77,-57,-14,-18,-15,-2,-29,-1,37,4,-9,-42,26,21,19,-127,127,7,-80,6,49,-28,-127,-127,39,24,15,26,59,-20,-30,-11,31,-8,-12,28,-110,69,24,-68,38,46,-18,51,-25,19,4,-7,17,47,-92,-50,-61,-18,-11,-1,11,38,67,-25,73,13,-8,16,19,127,23,22,26,0,-11,17,127,-5,-13,13,-28,20,125,21,-79,-15,2,-31,-15,-41,2,-25,-14,26, 127,-127,72,106,-43,127,39,-115,71,4,-18,127,127,-99,-12,17,11,127,127,-112,127,-78,82,68,-127,-117,-65,-34,-54,47,-60,-20,-88,49,-127,-86,-43,-14,-53,66,0,127,127,77,-52,-113,-113,-49,-16,-127,44,84,68,-31,46,81,-47,41,-79,-112,-45,-42,-62,68,73,-60,26,31,-81,33,-18,91,115,127,12,20,2,58,-31,52,65,127,127,-24,-7,76,-115,127,-117,-98,5,-127,-88,-127,-37,103, -76,-15,28,-83,15,-25,66,-5,81,-35,-28,19,-19,-6,-8,-10,-8,-18,7,-4,-22,-97,29,0,-120,93,9,-56,118,50,-15,10,3,14,12,-31,-9,34,19,11,26,12,-120,60,17,-18,37,13,-15,11,-17,4,-10,0,-4,20,-66,8,-33,51,1,39,33,-1,-6,-38,-30,25,9,1,-3,34,10,-27,-5,4,-12,-7,-84,2,-20,-23,-17,4,-109,10,-35,-22,-49,25,-25,-34,30,-25,-14,0, 
  /* [0][1][][] */ -65,-76,71,-37,-48,91,19,127,-51,-22,-1,-116,26,-116,78,32,-2,-59,-16,88,51,-72,47,49,-92,-13,127,-23,-25,64,122,-104,-127,91,-87,-57,-35,32,-28,96,-48,-26,-6,43,-48,127,-23,64,16,95,18,-3,15,-54,28,30,127,122,-73,-86,127,-34,-35,127,71,-38,-16,0,127,37,127,98,-40,105,-7,12,15,14,-32,10,-41,124,-78,110,1,32,-57,30,78,-127,-31,-10,127,-71,-22,1, 67,125,54,-116,127,82,88,38,-127,127,127,-36,-64,-127,-127,127,127,-62,-124,-51,101,90,-124,127,-106,-93,-42,127,-125,109,-127,-127,-90,127,105,127,127,-127,-106,127,-64,-97,111,-127,-127,-33,-127,-127,127,-112,86,43,127,127,127,-127,101,-127,-127,127,19,-78,-127,-98,-127,127,-127,127,-125,-127,-106,-83,-127,-81,127,127,-127,127,-77,127,127,30,-40,-127,61,127,92,46,127,13,127,-2,-67,36,127,-127, -54,-15,-47,38,-57,-97,34,-26,19,-33,-28,91,2,91,14,13,-4,66,-7,126,3,-87,-42,7,-74,101,-70,-21,-68,-17,17,-63,-71,41,4,-19,-29,46,-68,42,127,-5,-38,27,-40,-57,16,44,8,118,-13,6,-38,-71,3,19,97,4,1,20,-36,127,93,-52,-43,13,38,-11,-78,121,-19,-86,-1,-55,-17,-19,27,16,78,-37,-68,-42,58,15,-46,-17,72,23,16,63,-43,19,-42,98,-26,-6, 
  /* [0][2][][] */ -69,1,-5,-22,13,-45,60,23,57,-28,-37,-2,19,18,-26,1,-8,66,8,0,-54,-84,2,-9,-27,-53,36,-69,89,38,26,25,19,-10,-13,-47,-7,36,-4,2,-15,-5,-69,101,3,31,13,37,-15,-30,9,-19,21,-1,9,14,-72,23,-16,14,15,2,-20,-3,0,-46,-47,15,-32,13,25,31,14,-19,27,4,18,3,-79,-11,-6,-8,17,14,-127,6,14,-43,-56,-50,-27,-48,8,57,-18,-9, 121,34,-127,-37,-72,-25,34,31,-64,-28,-20,-106,-76,111,-12,39,2,-49,-8,-127,90,-54,-39,-1,-106,127,-49,20,-34,-22,-8,-5,-61,15,26,6,-23,-27,127,61,12,-13,68,-34,-39,77,-67,-43,-33,-4,-127,-127,-52,-25,0,39,-66,-9,10,39,-8,-17,9,-46,-54,33,64,-23,116,109,-23,-70,11,-58,2,4,101,4,52,19,14,-97,-49,2,1,6,127,39,-56,39,-19,-108,40,80,-9,24, -55,13,-17,26,15,-68,-127,4,-10,-8,-16,2,15,-27,19,-1,-8,-14,5,16,-47,-70,14,0,17,-97,21,3,-47,-40,-6,15,45,-20,-7,-25,-36,4,42,-41,23,-3,-48,-34,2,66,23,16,-9,-3,9,-9,16,6,-5,-5,-62,-14,3,-37,-12,9,85,-12,34,-2,-2,30,1,5,-4,21,-18,17,-2,17,37,-1,76,-13,5,-5,-6,-18,74,-2,42,-37,60,40,-17,-53,-8,3,-14,-17, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0054505071602761745, 0.0038842768408358097, 0.0055066449567675591, 0.010137926787137985, 0.0099559621885418892, 0.010028150863945484, 0.0019923115614801645, 0.0041221030987799168, 0.01143183559179306, 0.0096124894917011261, 0.011731184087693691, 0.0048935315571725368, 0.011133108288049698, 0.0090116644278168678, 0.018197149038314819, 0.0072110053151845932, 0.0076366323046386242, 0.0065792547538876534, 0.0081491097807884216, 0.0029095031786710024, 0.0025732256472110748, 0.0016152223106473684, 0.0058024013414978981, 0.0054107643663883209, 0.0039494088850915432, 0.0044051408767700195, 0.0068304082378745079, 0.0075127137824892998, 0.0031381787266582251, 0.02193002961575985, 0.016715593636035919, 0.0108768530189991, 0.0050110016018152237, 0.006294547114521265, 0.011485882103443146, 0.021209478378295898, 0.016375584527850151, 0.0092526217922568321, 0.011875043623149395, 0.0042112898081541061, 0.0093309301882982254, 0.0091698504984378815, 0.01526021771132946, 0.0028051170520484447, 0.016258856281638145, 0.0044517265632748604, 0.0050604129210114479, 0.013691802509129047, 0.029605461284518242, 0.0049454043619334698, 0.022496301680803299, 0.0072901574894785881, 0.013503727503120899, 0.0077318698167800903, 0.012037497013807297, 0.0046426830813288689, 0.0069983229041099548, 0.021420838311314583, 0.001889958162792027, 0.0073269489221274853, 0.013005446642637253, 0.012992554344236851, 0.0050773425027728081, 0.0063401181250810623, 0.0058898548595607281, 0.0054520578123629093, 0.012347259558737278, 0.012199952267110348, 0.0090009728446602821, 0.0052855792455375195, 0.010574291460216045, 0.0042217993177473545, 0.013096599839627743, 0.0059500653296709061, 0.018437612801790237, 0.01269968505948782, 0.0062393117696046829, 0.0028315093368291855, 0.002466909121721983, 0.0058025522157549858, 0.0090470705181360245, 0.010104423388838768, 0.0063420250080525875, 0.012114597484469414, 0.0023051858879625797, 0.0052342577837407589, 0.003208245849236846, 0.021790551021695137, 0.010329644195735455, 0.0055083539336919785, 0.014183709397912025, 0.0011379237985238433, 0.0065077575854957104, 0.0049045151099562645, 0.014034703373908997, 0.01314422395080328, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1584, 5838, 13377, 25845, 14673, -3464, -1850, 4991, 29642, -3681, 13340, 4314, 7536, 10800, 27950, 1248, 2412, 5847, 11440, 6856, -174, 420, 9549, -1161, 3353, 1, 14741, 5495, 6253, 36123, 40493, 18007, 6251, -604, 9218, 2798, 1213, 3108, 17570, -715, 13822, 8036, 39230, -3451, 28362, 8537, 6591, 12640, 56069, 9192, -477, 8379, -3407, -277, -1996, 5996, -597, 16838, 6319, 7518, 5919, 13706, 5351, 6557, 10972, 7378, 4059, -5203, 7138, -2219, 4585, 8577, 15267, 4658, -3556, -5086, 8106, 297, 1908, -1056, 12437, 13461, 4896, 10446, 3357, 310, 7309, 67731, 7860, 8036, 5053, -174, 6491, 8591, 4856, 13360, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00026431694277562201, 0.00025095525779761374, 0.00014093563368078321, 8.8833825429901481e-05, 0.00020392383157741278, 0.00029294952400960028, 0.00043944065691903234, 0.00032764728530310094, 7.9866920714266598e-05, 0.00037352909566834569, 0.00020228995708748698, 0.00019948337285313755, 0.00016779315774329007, 0.00021470041247084737, 8.4771658293902874e-05, 0.00044696888653561473, 0.00019128902931697667, 0.00020991914789192379, 0.00019500414782669395, 0.0001747125934343785, 0.00037285638973116875, 0.00056280626449733973, 0.0002122979931300506, 0.00055985193466767669, 0.00077606970444321632, 0.00028092219145037234, 0.00015124866331461817, 0.00025611073942855, 0.00026585118030197918, 9.7524098237045109e-05, 7.0174981374293566e-05, 0.00013728119665756822, 0.00026318535674363375, 0.0003601005591917783, 0.00021948243374936283, 0.00021475122775882483, 0.00042352243326604366, 0.00046759084216319025, 0.0001536883064545691, 0.0008042778936214745, 0.00013435751316137612, 0.0001983033143915236, 6.9140078267082572e-05, 0.00029967341106384993, 0.00011532083590282127, 0.00017971740453504026, 0.00026279085432179272, 0.00021329296578187495, 7.3766990681178868e-05, 0.00022943373187445104, 0.00024121551541611552, 0.00020285695791244507, 0.00031764397863298655, 0.00025330737116746604, 0.00052039878210052848, 0.00018662639195099473, 0.00017282855696976185, 0.00011133433872601017, 0.00032247183844447136, 0.00019677571253851056, 0.00027452781796455383, 0.00010325833864044398, 0.00027203062199987471, 0.00015424998127855361, 0.00022435218852479011, 0.00025946009554900229, 0.00032294815173372626, 0.00025294191436842084, 0.00023456408234778792, 0.00031526165548712015, 0.00024017026589717716, 0.00018348210141994059, 0.00013385224156081676, 0.00022154024918563664, 0.00043176868348382413, 0.00026872762828134, 0.0001991575991269201, 0.0004042038053739816, 0.00038189932820387185, 0.00036642569466494024, 0.00016389362281188369, 0.0001228733453899622, 0.00018042886222247034, 0.00018302715034224093, 0.00035100762033835053, 0.00027661293279379606, 0.00032235230901278555, 5.6970613513840362e-05, 0.00017659232253208756, 0.00028109963750466704, 0.00024921420845203102, 0.00040927476948127151, 0.0002279184409417212, 0.00018518275464884937, 0.00022875674767419696, 0.00013025956286583096, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -30,85,-31,73,4,28,16,-29,25,22,-42,106,8,-127,56,-96, 
  /* [1][0][][] */ 21,40,-18,-31,31,-24,127,-120,-1,74,-15,-29,-5,-53,31,8, 
  /* [2][0][][] */ -127,36,-24,0,1,11,53,102,-22,75,87,-4,-52,36,41,-46, 
  /* [3][0][][] */ -73,77,57,43,-67,59,42,127,22,80,-98,18,44,-56,-73,-36, 
  /* [4][0][][] */ -4,6,28,64,-30,62,6,59,0,-31,-2,-5,30,-4,-127,-11, 
  /* [5][0][][] */ 1,-44,66,-12,8,-15,-4,34,-56,105,-37,-127,-12,25,-60,-26, 
  /* [6][0][][] */ 4,5,21,-22,31,54,-65,-71,-17,-3,59,-14,127,-34,-2,-29, 
  /* [7][0][][] */ 21,25,127,-34,-42,-33,14,-17,-105,18,-78,-66,8,8,52,-19, 
  /* [8][0][][] */ 7,7,59,66,-62,66,20,42,26,-15,-4,-91,-27,-6,-127,-87, 
  /* [9][0][][] */ 32,-105,55,50,-2,-33,-10,20,127,2,71,4,-34,24,-99,-45, 
  /* [10][0][][] */ -43,-81,12,-19,-127,20,-14,49,118,121,72,-41,-52,71,102,-11, 
  /* [11][0][][] */ 20,-7,4,-127,-11,-24,-124,-114,-79,37,-13,-24,27,-5,61,-44, 
  /* [12][0][][] */ -26,18,-3,-42,-50,-32,-78,-4,-44,-61,-15,23,46,127,103,51, 
  /* [13][0][][] */ -41,-85,-68,20,-16,-49,-7,-29,42,3,-3,-19,17,13,127,35, 
  /* [14][0][][] */ -9,-43,47,38,8,39,12,111,27,45,18,-25,22,51,-67,127, 
  /* [15][0][][] */ 14,-38,-4,63,10,-8,102,1,6,-127,4,-29,12,-14,0,-29, 
  /* [16][0][][] */ 39,-79,-56,17,13,-1,32,-64,109,73,105,17,-9,90,79,127, 
  /* [17][0][][] */ -105,-61,6,97,60,35,-36,-67,127,-101,3,-6,3,38,-107,46, 
  /* [18][0][][] */ -5,11,-5,27,-72,-13,1,39,-50,-15,-9,-22,-3,-127,65,-14, 
  /* [19][0][][] */ 76,-89,75,-87,127,75,-127,81,103,-87,87,30,-32,61,30,113, 
  /* [20][0][][] */ 41,-25,63,-67,-9,3,-40,56,-12,-46,100,-8,13,20,-34,127, 
  /* [21][0][][] */ -62,-20,5,-43,20,6,-92,-55,-18,73,13,10,-127,-18,35,-3, 
  /* [22][0][][] */ 20,-30,23,-32,24,-66,8,-9,-127,28,-12,-39,-15,-11,83,-16, 
  /* [23][0][][] */ 19,5,17,-4,9,3,-12,6,-4,-2,45,-10,127,-4,5,-42, 
  /* [24][0][][] */ -12,15,-2,-62,-29,-15,54,9,-50,6,-9,-127,-7,-110,43,-2, 
  /* [25][0][][] */ -102,-23,-28,-1,65,1,-67,-127,-36,70,-37,-44,-39,-98,19,-45, 
  /* [26][0][][] */ 34,9,62,-127,123,-35,-12,5,101,-65,64,-21,3,112,-13,80, 
  /* [27][0][][] */ 92,-31,19,-26,-30,-40,4,-15,-25,18,-127,17,11,-9,0,28, 
  /* [28][0][][] */ -116,-5,-127,-89,45,-15,62,-71,-14,39,-43,28,43,-17,-37,53, 
  /* [29][0][][] */ -64,-29,-2,127,-15,15,24,-36,-17,1,-73,39,17,-71,28,-36, 
  /* [30][0][][] */ 72,6,127,-7,30,35,-38,57,-38,-54,59,-48,-22,28,-85,44, 
  /* [31][0][][] */ 10,-87,-2,-54,-5,-56,20,-47,-8,47,117,24,-15,91,73,127, 
  /* [32][0][][] */ 4,83,-27,48,-127,44,-71,-40,-56,-31,-6,60,4,65,28,54, 
  /* [33][0][][] */ 35,-18,25,127,24,-16,6,-40,-98,61,60,-15,19,-6,21,104, 
  /* [34][0][][] */ 29,1,19,-3,70,-33,-127,-20,-33,97,-45,9,-16,20,-4,16, 
  /* [35][0][][] */ 87,28,-7,8,14,-127,-23,-21,-36,-8,-107,-8,87,26,-23,15, 
  /* [36][0][][] */ 26,10,-127,7,36,17,-33,34,-28,-26,9,-13,2,10,-20,12, 
  /* [37][0][][] */ 11,18,127,0,-49,37,18,-55,-20,30,-63,17,20,-21,4,-5, 
  /* [38][0][][] */ -127,43,-3,44,32,88,28,-27,22,-14,127,-27,-19,-1,-20,-46, 
  /* [39][0][][] */ -12,-12,7,28,26,-22,-127,32,3,27,-13,-34,-1,-15,3,-2, 
  /* [40][0][][] */ 16,98,-18,127,16,51,72,23,-81,-38,-27,54,-6,65,-103,-47, 
  /* [41][0][][] */ 13,9,-44,-17,-52,-8,127,72,-49,70,-26,4,-7,47,42,-12, 
  /* [42][0][][] */ -8,-79,-34,-16,33,1,-93,52,60,-127,84,32,-27,35,-84,28, 
  /* [43][0][][] */ -80,-4,41,-53,50,33,-95,-92,-27,41,-6,-3,-127,-23,27,6, 
  /* [44][0][][] */ 0,9,-21,-14,-11,-15,-9,-57,127,-12,28,38,15,75,5,55, 
  /* [45][0][][] */ -56,-80,17,-108,25,-9,-24,67,21,-70,-13,-20,53,119,-37,127, 
  /* [46][0][][] */ -44,12,-24,98,-83,-21,9,-61,-127,48,-41,-15,-9,37,-3,-42, 
  /* [47][0][][] */ -19,-20,-91,127,13,50,-11,-34,15,59,57,53,-32,-14,28,-30, 
  /* [48][0][][] */ -5,10,29,-127,22,-23,-7,-13,-42,19,31,-8,-15,63,103,33, 
  /* [49][0][][] */ -26,30,42,127,-25,41,-76,-19,26,-40,-89,-35,-20,-44,-77,-107, 
  /* [50][0][][] */ 2,56,35,-94,63,13,-17,56,127,-3,-25,17,8,-15,12,-20, 
  /* [51][0][][] */ 1,-30,26,-10,53,-13,-59,-127,13,-71,-12,-4,-15,-16,-17,0, 
  /* [52][0][][] */ 33,26,2,34,26,-12,-62,94,-72,127,-52,-32,62,89,1,-41, 
  /* [53][0][][] */ 10,116,23,-87,-25,5,34,-6,-60,-38,-60,67,24,-127,-108,-7, 
  /* [54][0][][] */ -6,7,12,29,45,-23,8,-37,-1,31,-12,-23,-3,127,-39,-9, 
  /* [55][0][][] */ -109,127,80,-15,40,-20,-22,-12,-52,24,97,-18,-19,-39,122,-18, 
  /* [56][0][][] */ 67,-5,31,-127,93,8,-13,21,63,-45,54,120,-13,9,92,60, 
  /* [57][0][][] */ -38,-3,18,92,-12,38,29,127,8,1,17,-18,20,69,6,43, 
  /* [58][0][][] */ 16,124,-7,-127,1,37,-13,14,99,-12,5,75,-4,-85,43,67, 
  /* [59][0][][] */ 48,66,38,-118,-76,-19,37,-16,-8,11,15,-96,-30,-127,-107,5, 
  /* [60][0][][] */ 56,-13,122,-41,-31,127,27,-30,2,42,-51,-7,31,19,33,-2, 
  /* [61][0][][] */ -36,15,-60,-57,-45,19,127,97,-31,54,-16,15,19,61,28,-21, 
  /* [62][0][][] */ -16,-12,-4,-10,-61,33,-55,-1,-35,-29,-4,-46,19,-127,78,-14, 
  /* [63][0][][] */ -4,-49,-22,-104,50,1,-119,-127,-92,108,-20,31,83,19,49,-26, 
  /* [64][0][][] */ -35,-16,62,54,107,7,-51,-127,48,-103,11,-34,5,-21,-1,10, 
  /* [65][0][][] */ -127,22,33,-68,31,72,40,-58,-79,29,49,-11,8,7,-24,-18, 
  /* [66][0][][] */ 43,-12,62,-5,-47,-1,-44,27,-36,-16,70,-85,-7,30,-127,-3, 
  /* [67][0][][] */ 36,-30,-27,70,59,-31,-65,-107,35,-127,-70,-27,-77,13,-73,25, 
  /* [68][0][][] */ 12,-11,-73,44,-64,-75,2,-60,-34,-15,57,-72,-37,64,127,-10, 
  /* [69][0][][] */ -15,29,-53,64,2,-117,32,77,26,19,42,-17,127,26,-27,-2, 
  /* [70][0][][] */ 17,14,-36,-51,-50,3,127,97,-32,46,-16,5,6,36,26,-14, 
  /* [71][0][][] */ 4,-18,-36,-47,25,7,2,53,-33,-46,-22,6,22,-127,83,17, 
  /* [72][0][][] */ 53,29,-8,52,43,-37,-43,-127,31,66,-54,26,34,69,51,34, 
  /* [73][0][][] */ -60,-127,-26,-64,-84,-16,46,-21,-22,22,-37,-26,33,-52,83,3, 
  /* [74][0][][] */ -29,47,66,93,-1,-4,-127,98,12,-33,-48,-40,-9,4,-19,3, 
  /* [75][0][][] */ -62,15,-34,11,-22,63,63,111,2,49,-16,-22,-127,63,30,36, 
  /* [76][0][][] */ 36,-49,-43,-29,67,-101,-126,-127,-15,-8,-8,-33,62,-25,55,-23, 
  /* [77][0][][] */ -33,3,-38,-30,-45,-13,-23,-35,127,11,-60,16,-13,34,30,-76, 
  /* [78][0][][] */ -100,-127,-5,73,76,64,-18,31,-11,-62,-99,69,40,-17,92,37, 
  /* [79][0][][] */ 9,-24,27,-70,127,-18,33,8,71,14,11,55,-12,-42,35,-33, 
  /* [80][0][][] */ -8,-23,65,-89,-29,-33,11,22,-66,-33,-17,-46,13,127,-46,23, 
  /* [81][0][][] */ 5,-33,62,43,16,81,-56,-59,21,-42,-8,-80,-14,28,-127,32, 
  /* [82][0][][] */ -122,-45,7,-125,-27,-24,-19,-37,-34,-52,-62,-113,-32,-127,-117,55, 
  /* [83][0][][] */ 2,14,-8,-91,-38,10,6,55,-67,5,13,-105,11,-127,-9,42, 
  /* [84][0][][] */ 127,14,6,39,-84,-9,-75,9,-19,-41,115,0,-95,15,115,-91, 
  /* [85][0][][] */ -7,-27,13,-34,47,-11,-47,120,-86,-119,-73,-37,-21,73,91,-127, 
  /* [86][0][][] */ 23,-5,5,14,-40,52,-31,29,-62,-32,25,-27,-21,-127,-16,14, 
  /* [87][0][][] */ 127,-46,15,4,-42,-39,9,4,-19,17,-126,13,40,-20,-13,35, 
  /* [88][0][][] */ 63,54,-27,-14,-10,-31,-25,-20,77,39,18,28,-42,-46,127,-112, 
  /* [89][0][][] */ 47,44,-76,-16,-36,-28,20,-66,41,40,17,-45,-38,-1,-17,-127, 
  /* [90][0][][] */ -23,-16,12,-59,-77,17,127,-35,93,-77,7,-79,60,-30,-44,15, 
  /* [91][0][][] */ -2,-9,-26,-88,-38,-1,23,-40,-39,11,57,37,-1,-19,40,127, 
  /* [92][0][][] */ 26,16,19,7,48,-22,-85,-127,59,-54,5,-38,-48,-7,6,-33, 
  /* [93][0][][] */ 83,11,30,-127,-51,-12,-32,44,44,-87,75,-33,-50,122,-38,18, 
  /* [94][0][][] */ -111,57,-92,13,66,-127,-13,21,-19,-63,83,-41,11,-17,-31,3, 
  /* [95][0][][] */ -21,56,15,-127,4,-12,-48,-16,18,-46,-55,-60,15,18,-57,12, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00074727908940985799, 0.00070950284134596586, 0.00039845443097874522, 0.00025115173775702715, 0.00057653518160805106, 0.00082822935655713081, 0.0012423903681337833, 0.00092632719315588474, 0.00022580043878406286, 0.0010560445953160524, 0.0005719158798456192, 0.00056398106971755624, 0.00047438623732887208, 0.00060700281755998731, 0.0002396671479800716, 0.0012636742321774364, 0.0005408139550127089, 0.00059348519425839186, 0.00055131735280156136, 0.00049394892994314432, 0.0010541427182033658, 0.0015911705559119582, 0.00060021068202331662, 0.0015828181058168411, 0.0021941107697784901, 0.00079422560520470142, 0.00042761149234138429, 0.0007240784470923245, 0.00075161672430112958, 0.00027572095859795809, 0.00019839929882436991, 0.00038812257116660476, 0.00074407987995073199, 0.0010180793469771743, 0.00062052259454503655, 0.00060714647406712174, 0.0011973861837759614, 0.0013219767715781927, 0.00043450886732898653, 0.0022738613188266754, 0.00037985670496709645, 0.00056064478121697903, 0.0001954734034370631, 0.00084723916370421648, 0.00032603603904135525, 0.0005080985720269382, 0.00074296450475230813, 0.00060302368365228176, 0.00020855465845670551, 0.00064865697640925646, 0.00068196654319763184, 0.00057351891882717609, 0.00089804572053253651, 0.00071615271735936403, 0.00147127581294626, 0.00052763172425329685, 0.00048862234689295292, 0.00031476537697017193, 0.00091169506777077913, 0.00055632594740018249, 0.00077614735346287489, 0.0002919328399002552, 0.00076908728806301951, 0.00043609685963019729, 0.00063429039437323809, 0.00073354772757738829, 0.00091304176021367311, 0.00071511947317048907, 0.00066316156880930066, 0.00089131039567291737, 0.00067901139846071601, 0.00051874213386327028, 0.00037842817255295813, 0.00062634045025333762, 0.0012207000982016325, 0.00075974897481501102, 0.00056306004989892244, 0.0011427684221416712, 0.0010797090362757444, 0.0010359617881476879, 0.00046336141531355679, 0.0003473885590210557, 0.00051010999595746398, 0.00051745591918006539, 0.00099237170070409775, 0.00078204239252954721, 0.00091135717229917645, 0.00016106780094560236, 0.0004992632893845439, 0.0007947272970341146, 0.00070458051050081849, 0.00115710508543998, 0.00064437295077368617, 0.00052355026127770543, 0.00064674299210309982, 0.00036827093572355807, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -2352, -3511, -8453, 30190, 28552, 5514, -6169, -2756, 18321, 758, 27230, 23568, -9891, 11054, 33437, -24248, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00043614345486275852, 0.00024757845676504076, 0.00024623097851872444, 0.00022163924586493522, 0.00030893631628714502, 0.00031980176572687924, 0.00032005147659219801, 0.00036435367655940354, 0.00020394590683281422, 0.00026723774499259889, 0.00033621964394114912, 0.00063435389893129468, 0.0004235403030179441, 0.0004423797654453665, 0.00043373327935114503, 0.00032178216497413814, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,16,-14,13,51,62,-38,-29,40,-2,11,-3,-13,16,19,77,-5,-11,-11,-8,92,-46,6,-17,-19,-31,-45,-95,0,-13,44,43,110,-1,6,0,4,-22,-13,2,-30,16,13,-28,0,-25,-15,21,-16,23,11,-11,-39,-13,5,-3,42,24,-24,-22,-58,32,-14,-15,8,7,55,3,5,10,-4,-18,-58,-9,7,-3,-8,-81,0,-17,34,-27,-61,-50,37,-12,-1,25,-6,12,12,-30,30,30,-10,127, 
  /* [1][0][][] */ 79,-105,55,72,-1,-81,-25,-53,-23,-83,-1,25,1,-64,-42,-69,-96,5,22,31,-29,-111,-48,39,127,-67,-84,12,-30,108,-18,39,2,22,-53,11,-30,-19,64,-35,-2,-71,69,-25,-68,11,51,9,45,18,8,-63,62,-74,43,-28,26,9,-25,-105,39,-57,24,-59,-5,-100,39,54,24,59,-36,-14,-101,51,-19,58,37,105,32,-13,35,-1,-80,49,-81,66,-8,67,-51,10,10,10,10,-40,44,5, 
  /* [2][0][][] */ 25,23,7,-26,6,1,-3,44,56,-13,7,82,2,6,56,5,-7,-24,8,-5,-23,-64,11,-45,3,-19,-24,31,5,16,127,-56,20,-78,-19,59,20,124,-47,-25,10,-8,-4,41,-46,-56,-58,24,22,34,-33,-31,31,-4,-5,-30,-19,-7,2,29,10,-1,81,104,-2,-80,7,-78,-7,-10,-18,16,-32,6,-29,19,24,59,5,12,16,86,25,-24,-12,2,18,14,27,11,-1,-60,-34,-3,-7,61, 
  /* [3][0][][] */ -10,-14,-40,42,35,-15,4,-24,-9,15,-2,18,9,-14,48,6,46,-48,13,4,-16,-11,-6,12,-17,13,11,-3,28,-52,60,-14,16,-13,-10,52,-8,-2,-13,7,19,-71,25,-28,-6,1,10,1,-127,41,-14,31,-117,-48,-30,-38,30,12,-10,54,-3,12,13,16,-16,-83,-41,18,59,12,-7,29,-47,7,-10,-48,-43,-56,32,-43,16,-27,22,63,42,59,39,21,36,-4,3,7,-25,3,-15,-28, 
  /* [4][0][][] */ -4,-40,14,-74,15,-8,-41,9,-30,-44,-32,0,10,83,19,9,65,-14,6,9,2,42,55,12,-3,8,24,11,3,-4,-18,-11,-43,17,2,13,32,-33,10,-15,24,18,-102,-29,32,-16,-7,-11,-1,86,-23,-10,-26,-7,12,-21,-1,-35,23,38,10,8,15,2,36,-123,9,-23,-49,21,-21,2,-26,18,-9,39,-23,67,65,7,5,0,127,-54,51,-9,1,4,75,8,5,32,-23,40,-7,-46, 
  /* [5][0][][] */ -17,8,-10,-7,-5,-16,3,123,52,-19,-21,-15,-16,33,44,33,-20,-17,-7,-37,-53,-1,2,-44,12,5,21,80,88,3,58,52,-60,27,7,-3,-62,-65,-34,-27,-32,-5,-18,-2,62,17,11,28,6,12,-14,10,-34,-18,4,-13,-19,-30,-11,43,-55,15,-25,-46,3,18,-23,11,-9,21,-2,1,24,1,7,2,-2,21,10,127,-13,-51,16,24,3,-6,32,-28,5,-23,29,-127,-24,-18,-10,-117, 
  /* [6][0][][] */ -17,7,-17,-69,-2,-31,-25,10,-7,21,-26,-1,33,-54,3,-16,-8,-77,26,11,0,14,-23,33,78,-18,-9,2,27,-12,10,-15,-35,7,-36,7,13,5,37,27,-9,-23,-65,-12,-10,-21,33,-127,17,40,28,7,5,3,-8,-43,46,-23,-11,9,26,32,4,4,28,68,36,-20,-36,-18,15,-33,17,5,53,-14,-25,44,8,11,-31,-1,52,-22,-3,54,23,-28,24,10,-40,-3,-19,19,-7,22, 
  /* [7][0][][] */ 9,14,38,-18,-17,9,-1,-23,0,-11,-13,-18,-3,-92,27,16,-1,-32,-14,-14,6,-19,-32,-6,-24,-6,5,-15,14,2,3,9,-11,3,-2,-18,6,-5,-37,31,10,-19,-16,24,-3,12,-13,73,-5,22,-16,-23,-23,6,-11,-48,36,11,3,-1,-6,-8,-12,-16,-16,45,9,-34,-1,-4,3,43,-9,-20,-13,15,46,-11,-7,-31,11,-32,39,-8,-36,127,-9,-9,-31,-15,-3,25,-27,-4,-6,2, 
  /* [8][0][][] */ -61,34,-53,12,52,-10,1,15,15,55,-41,18,8,45,69,-11,-7,31,-70,34,27,42,-30,5,-34,-12,10,21,70,-83,-12,-6,27,1,20,-3,-24,35,-31,29,8,28,16,-127,-31,-9,41,-21,-41,21,-14,61,-107,77,19,-12,13,-14,-29,-7,6,-34,5,28,-24,39,9,-35,-8,3,32,78,-28,23,50,39,-9,-89,-6,-37,-14,-18,20,-10,-38,15,32,-32,-1,44,-21,19,39,-1,-15,-7, 
  /* [9][0][][] */ 15,-54,-29,-31,8,33,-7,23,33,-21,-5,11,-31,-22,0,32,0,15,32,-22,-26,17,-14,-41,31,23,31,-5,-20,-43,-35,4,-15,18,16,36,15,50,-40,19,12,4,-15,-97,21,-11,45,-126,-41,-9,3,28,-14,22,-22,2,-53,42,-1,27,6,2,11,25,32,127,27,31,22,-8,8,-8,-14,-9,-25,13,64,-11,8,8,-1,6,17,-52,13,21,2,-6,-48,40,-34,21,19,18,5,-12, 
  /* [10][0][][] */ 28,55,-22,31,78,-127,-14,-33,-4,52,33,2,-17,21,17,-81,12,39,-32,53,-80,0,-13,-21,-76,-23,-64,55,12,12,-8,40,-13,-7,40,-13,76,-33,-7,-19,-5,71,44,-17,-61,-12,-34,20,-22,-21,-46,6,-21,-4,1,-25,12,21,-32,-4,9,4,-18,18,16,50,52,28,27,6,35,57,-53,-37,-49,-14,-1,28,-12,5,23,-11,-77,-42,70,-46,102,-8,-24,9,23,5,102,54,-13,-127, 
  /* [11][0][][] */ 41,37,-32,25,-4,23,59,5,2,-19,-28,-9,4,1,30,16,0,-12,-99,-9,-1,20,10,-10,-42,-16,-9,5,3,14,-9,-1,-10,4,6,28,12,14,-11,20,8,31,62,-106,34,-40,7,-6,-127,9,6,-43,25,27,-16,7,-20,-6,11,1,15,-27,-11,6,-47,60,-27,1,20,-7,22,14,-57,-34,14,35,-8,-38,-53,-1,16,2,91,37,10,-9,-4,-15,-2,20,-15,3,5,8,-23,14, 
  /* [12][0][][] */ -31,-3,5,-7,-22,39,16,5,127,-1,-4,-3,0,12,-35,-43,33,24,4,80,52,38,-14,-21,3,17,18,-31,-112,-1,25,-30,0,1,-2,-20,17,6,31,-7,-53,-15,-6,15,4,31,1,-10,18,9,-47,14,5,-5,16,-4,79,-19,14,13,18,-23,10,-7,-7,28,-52,-5,2,9,-19,-23,24,11,-68,11,30,-2,4,-69,-13,3,32,27,-12,-17,-25,-33,4,22,2,55,-6,-28,15,13, 
  /* [13][0][][] */ 28,-9,-27,33,29,1,7,1,-3,5,9,1,11,-10,15,-13,19,-76,-38,12,-5,-22,9,6,8,8,0,-1,-10,-34,-3,16,-5,8,14,41,15,3,10,15,-6,6,23,41,19,16,-11,-127,19,-5,9,6,-18,0,27,4,-12,19,17,14,7,21,-4,2,-7,-19,-18,-55,10,17,-5,-39,-17,41,-7,23,-22,0,18,4,29,-9,-12,24,13,28,12,17,0,4,21,2,8,18,-9,-1, 
  /* [14][0][][] */ -126,-53,34,55,35,-29,-39,11,-10,16,-16,15,68,7,-127,-7,84,-19,-12,23,-11,-14,31,12,-102,13,41,-9,-40,-72,-34,-6,-7,0,20,-63,30,38,3,28,18,27,-4,-36,22,122,69,62,-108,50,23,29,-47,3,35,4,4,13,67,53,35,55,15,56,10,-8,-37,40,14,72,-48,-91,-78,-4,-8,50,-13,41,91,3,61,24,42,35,32,12,53,31,22,38,69,-5,-6,18,21,-30, 
  /* [15][0][][] */ 86,-19,39,-2,-7,82,34,-11,-8,58,12,9,-80,-13,-15,27,21,51,48,-27,1,13,-83,59,19,4,53,-10,18,48,-51,-82,8,-46,53,-6,47,-35,-56,-95,-6,24,2,38,-7,49,-24,-46,99,-43,-54,23,50,-125,63,-112,-3,-55,25,13,-127,2,22,25,75,-15,-52,45,-30,73,-27,12,45,32,12,9,20,-59,66,-5,-10,5,34,85,-25,1,-1,-63,15,-2,63,-3,-59,50,22,-18, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018536096438765526, 0.010522084310650826, 0.010464816354215145, 0.0094196675345301628, 0.013129793107509613, 0.013591574504971504, 0.013602187857031822, 0.01548503153026104, 0.0086677009239792824, 0.011357604525983334, 0.014289334416389465, 0.026960041373968124, 0.018000463023781776, 0.018801139667630196, 0.018433663994073868, 0.013675741851329803, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10251, -9198, 3187, 46570, -1540, -4390, -10475, 2984, -2834, 829, 2857, -1890, 1052, -4558, 7082, -5339, -854, 16966, 25805, 2524, 2481, -2352, 15, 341, 16090, -659, -713, -3830, -5547, -7278, 5748, -9355, -95, -2578, -551, 11441, 1241, -3365, 21412, 475, -252, 2115, -8948, -7701, -7065, 68620, 148, 17510, 31758, -12680, -942, 6529, 7288, -355, -6547, 2362, -9667, 1912, 2290, -6580, -2050, -963, -13443, -203, 1672, 15020, 27993, 24074, -11859, 43, -11420, -551, 48916, 11996, 704, 317, 19235, 35436, -32, -6098, -2140, -7709, 1470, -3032, 604, -349, 1275, -287, 1814, -2985, -254, -478, -86, -199, 44, 47653, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019605230772867799, 0.00011675919085973874, 0.00025161751545965672, 4.6249802835518494e-05, 0.00016175620839931071, 0.00016171236347872764, 0.00034649547887966037, 7.7330878411885351e-05, 0.00011944073048653081, 0.000378049211576581, 0.00016270474588964134, 0.00030779986991547048, 8.6533989815507084e-05, 0.00045055418740957975, 0.00014982072752900422, 0.00015649842680431902, 0.00011112471111118793, 0.00030451736529357731, 5.7209246733691543e-05, 0.00020930226310156286, 4.6422021114267409e-05, 0.00018434908997733146, 0.00014973759243730456, 0.00034973456058651209, 0.00022104506206233054, 0.00026112250634469092, 0.00012699766375590116, 0.00017945443687494844, 0.00011337098112562671, 0.00011789408745244145, 0.00013843893248122185, 0.00017848947027232498, 0.00013216459774412215, 9.626087557990104e-05, 0.00019633867486845702, 0.00020525905711110681, 0.00044589219032786787, 0.00013121101073920727, 6.1947459471412003e-05, 0.00014500925317406654, 0.0002087248140014708, 0.00030902744038030505, 0.00039256940362975001, 0.00015585079381708056, 0.00018196644668933004, 5.6686876632738858e-05, 0.00023864330432843417, 0.0001966303534572944, 8.2842692791018635e-05, 0.00018995099526364356, 0.0001653425715630874, 0.00019425789650995284, 0.00023792669526301324, 0.00029527352307923138, 0.00023212807718664408, 0.00045420773676596582, 0.00042357560596428812, 0.00019610353047028184, 0.00011462542170193046, 8.4468621935229748e-05, 0.00030682526994496584, 0.0001368166267639026, 0.00027170864632353187, 0.000149022918776609, 0.00022769866336602718, 0.00019621774845290929, 9.1499176051001996e-05, 7.5409698183648288e-05, 0.00040365985478274524, 0.00025035094586201012, 0.00017661566380411386, 9.2282978584989905e-05, 0.00011765694944187999, 0.000181832947419025, 0.00016003529890440404, 0.00028200354427099228, 0.00052837328985333443, 5.3608589951181784e-05, 0.00027081274311058223, 0.00030537851853296161, 0.00016605071141384542, 0.00027080514701083302, 9.9604141723830253e-05, 0.00016121831140480936, 0.00012466771295294166, 9.6004710940178484e-05, 0.00014192466915119439, 0.00017500051762908697, 0.00021394816576503217, 0.00012020549911540002, 0.00020304515783209354, 0.00011058669042540714, 0.00015471711230929941, 0.000462041498394683, 0.027967102825641632, 8.2345446571707726e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-20,104,-17,25,-61,-53,18,-5,99,-9,4,-8,-4,52,5,17,-33,4,74,3,31,-35,2,17,41,48,21,12,23,48,-7,28,11,-15,4,49,-62,-26,19,8,27,17,-85,-57,25,-6,-11,-19,-6,-6,49,6,-8,1,-3,-35,27,-31,27,-2,127,27,-13,-11,12,-54,65,35,3,-4,78,-31,67,4,17,-127,29,66,1,13,127,-14,38,29,-28,-19,35,-6,-13,80,-1,19,-2,14, -49,12,-8,10,52,-7,-10,-127,38,13,-127,-5,-17,-13,5,91,17,-31,-19,-15,77,-97,127,25,-61,-31,-103,-16,27,37,-49,18,119,12,-12,-1,-24,127,-66,-127,8,-20,-30,15,46,-127,127,-45,-76,50,51,7,39,-63,32,56,36,42,-98,85,127,34,3,-20,43,-38,-93,-2,37,-31,-18,46,-48,-47,104,-2,-30,-61,-33,64,-64,62,-16,10,-11,48,55,-41,-28,53,-12,72,-127,-31,23,-127, 0,-5,-23,-73,10,17,37,23,-3,-2,3,63,0,-12,-11,2,-12,18,-18,17,5,25,24,-33,1,-32,6,11,-7,3,46,-79,45,18,10,-23,11,3,-36,-21,8,2,-16,9,22,-33,20,0,7,-7,6,-5,5,6,-5,8,-7,44,8,-2,11,-17,3,-17,-26,-17,33,-51,-104,-7,41,-14,-127,-23,-13,17,10,-12,5,12,-13,21,-37,-2,-41,21,28,37,-25,-17,26,-12,18,7,-2,-44, 
  /* [0][1][][] */ -41,58,-17,37,-85,-15,-10,-44,26,96,-45,-22,-30,-25,-7,63,127,-25,-90,-13,60,-127,-29,15,-34,-46,-127,-5,38,36,-50,28,-127,-74,-57,3,66,-4,-52,47,-20,86,1,-4,36,-51,-12,-33,127,42,-3,20,44,10,-36,-17,31,9,-123,127,-36,-88,20,127,-59,-36,-85,126,-37,127,-18,51,-34,-54,36,8,-35,-71,127,48,127,35,5,-1,127,29,-95,47,-38,-35,-101,39,95,102,29,-59, 127,127,127,127,-45,-127,127,24,127,-127,17,-127,-108,127,127,127,-16,-127,-61,-127,127,22,-66,127,127,127,-53,-127,127,127,-127,127,-9,-127,-124,127,-127,-46,96,109,-127,-127,127,127,127,-118,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-105,-28,-71,-68,127,127,-69,127,127,-107,-127,127,-40,127,-127,-127,-127,123,-76,127,-42,127,77,127,-38,-127,-24,-107,-127,-127,-22,-127,-22,-127,-127,117, -24,66,-37,2,127,72,-20,49,5,24,-12,-5,-27,-30,-13,-5,-104,-22,-127,39,32,76,-12,-117,-34,-41,121,72,9,38,72,8,122,-47,127,-4,55,5,-101,14,36,23,-23,1,-24,-55,-13,-43,82,14,-10,39,-6,-4,-74,-14,24,20,127,-90,3,127,1,-36,-111,-29,-75,100,16,-17,114,23,-18,-57,11,48,-29,-8,-44,-3,-45,8,47,24,-91,36,127,-46,32,-23,127,-9,-111,34,34,18, 
  /* [0][2][][] */ -4,-37,-21,-60,-5,15,41,32,-2,10,-20,51,24,-34,-8,10,41,4,9,22,-10,30,-16,-26,1,-23,11,3,-8,-6,48,-73,-38,68,-28,-25,32,-35,-67,16,8,9,-36,18,13,-79,-11,-1,-10,6,17,-8,7,1,-21,7,-1,44,-51,33,-5,-11,5,17,-6,-9,21,-55,-56,11,-21,-12,-115,-31,0,18,14,-13,56,18,23,22,-41,15,11,25,-21,8,5,26,22,-5,21,39,-7,-30, -28,-8,-26,24,-45,76,-25,66,6,-6,56,-12,127,-6,-18,-14,-2,-40,-60,23,-23,78,-44,-112,-47,-46,102,69,15,45,53,-2,-121,64,-15,-23,-28,-27,-127,-5,44,-14,-16,36,-28,-46,-18,-47,-60,28,70,24,-12,-81,30,53,18,25,72,-56,20,-56,-9,0,19,-25,-127,-56,-10,-27,-63,23,38,-46,-29,-7,-45,22,-57,1,50,34,15,11,4,62,-93,127,14,125,-31,-18,115,-21,46,83, -9,-32,-25,28,12,67,-42,13,3,-6,0,14,11,-49,-10,-10,-44,-5,13,20,-24,5,-20,3,-3,19,0,51,-3,-4,33,28,18,43,19,-23,-6,-26,-35,9,10,-12,20,7,-75,-33,-13,5,-2,-15,0,-4,-9,9,-16,-5,-2,-50,12,-28,-21,50,9,-28,-11,-3,36,-55,45,7,54,-22,30,-54,-19,23,10,10,-5,22,-29,33,89,-14,-18,54,39,-8,108,11,2,-18,11,-22,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0083322227001190186, 0.0049622654914855957, 0.010693744756281376, 0.0019656165968626738, 0.0068746386095881462, 0.0068727750331163406, 0.014726057648658752, 0.0032865621615201235, 0.0050762309692800045, 0.016067091375589371, 0.0069149518385529518, 0.01308149378746748, 0.0036776943597942591, 0.019148552790284157, 0.0063673807308077812, 0.0066511831246316433, 0.0047228001058101654, 0.012941987253725529, 0.002431392902508378, 0.008895345963537693, 0.0019729358609765768, 0.007834835909307003, 0.0063638472929596901, 0.014863718301057816, 0.0093944147229194641, 0.01109770592302084, 0.0053974008187651634, 0.0076268133707344532, 0.004818266723304987, 0.0050104986876249313, 0.0058836545795202255, 0.0075858021154999733, 0.0056169950403273106, 0.0040910872630774975, 0.0083443932235240936, 0.0087235094979405403, 0.018950417637825012, 0.0055764676071703434, 0.0026327669620513916, 0.0061628930270671844, 0.0088708046823740005, 0.013133666478097439, 0.016684198752045631, 0.0066236583516001701, 0.0077335736714303493, 0.0024091922678053379, 0.010142340324819088, 0.0083567900583148003, 0.0035208144690841436, 0.0080729173496365547, 0.0070270588621497154, 0.0082559604197740555, 0.010111884213984013, 0.012549124658107758, 0.0098654432222247124, 0.019303828477859497, 0.018001962453126907, 0.0083344001322984695, 0.00487158028408885, 0.0035899165086448193, 0.013040073215961456, 0.0058147064410150051, 0.011547616682946682, 0.0063334740698337555, 0.0096771931275725365, 0.0083392541855573654, 0.0038887150585651398, 0.0032049121800810099, 0.017155542969703674, 0.010639915242791176, 0.0075061656534671783, 0.0039220266044139862, 0.0050004203803837299, 0.0077279000543057919, 0.0068014999851584435, 0.011985150165855885, 0.022455865517258644, 0.0022783649619668722, 0.011509541422128677, 0.012978586368262768, 0.0070571550168097019, 0.011509218253195286, 0.0042331758886575699, 0.0068517779000103474, 0.0052983774803578854, 0.0040802001021802425, 0.0060317981988191605, 0.0074375215917825699, 0.0090927965939044952, 0.0051087336614727974, 0.0086294189095497131, 0.0046999342739582062, 0.0065754768438637257, 0.019636763259768486, 1.1886018514633179, 0.0034996813628822565, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 13266, 1007, 5955, -572, 4105, 4282, 13073, 5280, -959, 13074, 6735, 1277, 6306, 39109, -298, -1769, 8030, 10713, 1729, -130, -529, 14218, 4422, 3402, 8386, 4694, 3667, 3560, 40, -16, 6116, 8022, 12593, 1495, 6062, -648, 17261, 6034, 878, 3602, 713, 11257, 11102, 4178, 2856, 9911, 14058, 3918, 4846, 2701, 232, -568, 14528, 5464, 7176, 14896, -292, 7565, 2742, 3383, 11469, 6230, 2481, 5484, 5469, 4415, 5670, -632, 23339, 6347, 11399, -1042, -1313, 2482, 1387, 3357, 23164, 11983, 13377, -2326, 5925, -5384, -1600, 556, 6655, 4609, 5808, 4669, 9892, 4652, 6126, 3527, 13840, 16725, -8724, 12832, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00019468057143967599, 0.00033428380265831947, 0.0002247131778858602, 0.00097332056611776352, 0.0003827266045846045, 0.00020989991025999188, 0.0002374789328314364, 0.0006617769249714911, 0.00046336132800206542, 0.00013797348947264254, 0.00021193786233197898, 0.00063992501236498356, 0.00044036973849870265, 0.00012265468831174076, 0.00030627381056547165, 0.00040529909892939031, 0.00027669055270962417, 0.00021687377011403441, 0.00026020727818831801, 0.00076739431824535131, 0.00049671967281028628, 0.00017482136900071055, 0.00033606099896132946, 0.00023792283900547773, 0.00021489952632691711, 0.00043934400309808552, 0.00038262779708020389, 0.00025318303960375488, 0.00058239256031811237, 0.00040555369923822582, 0.00023587432224303484, 0.00023629538191016763, 0.00015743050607852638, 0.00071712146745994687, 0.00027574467821978033, 0.00045151531230658293, 0.00013117461639922112, 0.00043479964369907975, 0.00054402573732659221, 0.00026198121486231685, 0.00071872462285682559, 0.00016784897889010608, 0.00019392257672734559, 0.00017353716248180717, 0.00039412311161868274, 0.00033070202334783971, 0.00020261823374312371, 0.0003711258468683809, 0.00032819481566548347, 0.00032635021489113569, 0.00045123926247470081, 0.0011743202339857817, 0.00018385534349363297, 0.00029092884506098926, 0.00032215958344750106, 0.00012485857587307692, 0.00046210514847189188, 0.00023114153009373695, 0.00029294283012859523, 0.00048246560618281364, 0.00014738450408913195, 0.00022462081687990576, 0.000415127316955477, 0.00050153321353718638, 0.00019062279898207635, 0.0002594806719571352, 0.00034122166107408702, 0.00053171982290223241, 0.00011564478336367756, 0.00018190442642662674, 0.00017384706006851047, 0.00046278687659651041, 0.00031127803958952427, 0.00053960969671607018, 0.00032428000122308731, 0.0003830356290563941, 0.00010329711949452758, 0.0003742660628631711, 0.00012561942276079208, 0.00052263552788645029, 0.00017906236462295055, 0.0003872090601362288, 0.00023364181106444448, 0.00050192297203466296, 0.00023861022782512009, 0.00033604490454308689, 0.00028162647504359484, 0.00029819767223671079, 0.00017127544560935348, 0.00034788696211762726, 0.00022783460735809058, 0.0004851455450989306, 0.00015404877194669098, 0.00016518605116289109, 0.00033596323919482529, 0.00025475688744336367, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 33,-6,127,111,67,-28,33,-31,106,-13,-48,-57,24,74,-40,-77, 
  /* [1][0][][] */ 45,70,-9,-2,94,-19,-9,16,39,64,-33,127,3,-37,78,-61, 
  /* [2][0][][] */ 39,-41,-2,13,-78,56,-43,119,-63,-95,1,104,-7,-127,95,-94, 
  /* [3][0][][] */ 127,125,-2,35,-122,-14,-69,-35,1,-3,110,-69,-70,109,-57,-42, 
  /* [4][0][][] */ -7,-20,17,11,-14,39,-24,37,-68,-58,-24,16,5,-127,25,19, 
  /* [5][0][][] */ 100,-37,-24,-24,-20,-127,-41,9,-8,4,-98,-26,24,-31,1,42, 
  /* [6][0][][] */ -108,-58,-19,87,-40,-2,-51,14,-127,-85,-77,-27,14,49,4,95, 
  /* [7][0][][] */ -5,21,-68,57,57,-127,-35,35,19,-34,11,-3,-9,17,-38,6, 
  /* [8][0][][] */ 36,-41,-5,-6,16,23,-57,-53,-8,18,-76,16,-127,0,-6,20, 
  /* [9][0][][] */ 16,-53,67,127,-4,27,0,-66,122,-79,6,-12,-5,54,-80,28, 
  /* [10][0][][] */ -127,-60,-23,-58,103,43,63,111,94,-62,-99,56,114,-118,-110,100, 
  /* [11][0][][] */ 42,-10,-127,10,49,18,-23,36,-13,-32,-13,-9,-6,12,-47,7, 
  /* [12][0][][] */ 96,-53,-4,8,-14,-65,-79,-44,50,-4,-127,-31,-56,-27,19,65, 
  /* [13][0][][] */ 59,-97,2,-56,91,-18,-127,-124,-2,-71,-3,23,17,-21,6,7, 
  /* [14][0][][] */ -73,31,-82,-55,88,-127,52,-53,50,48,-11,-92,28,92,-12,38, 
  /* [15][0][][] */ 28,-11,60,51,53,-54,-35,2,22,-59,-84,-9,-127,-55,-16,47, 
  /* [16][0][][] */ -127,60,-11,1,-19,74,36,57,-21,20,113,22,10,-3,12,-32, 
  /* [17][0][][] */ -5,-10,-40,-27,-26,10,41,78,-16,127,-15,12,-7,81,64,-4, 
  /* [18][0][][] */ 1,127,-55,0,10,-4,44,-78,32,120,-67,109,-2,-59,37,-95, 
  /* [19][0][][] */ -1,-20,34,18,7,47,-3,18,9,12,-41,-11,-127,-5,-8,33, 
  /* [20][0][][] */ 96,-57,-11,-79,-29,14,29,-94,-49,26,-127,-47,23,1,63,-1, 
  /* [21][0][][] */ 59,3,127,58,-28,53,19,-11,8,27,-14,-17,-23,72,10,-20, 
  /* [22][0][][] */ 33,21,27,26,-10,9,35,127,12,-6,-1,42,11,41,27,12, 
  /* [23][0][][] */ -28,27,-91,23,11,-127,20,43,4,-13,-6,-7,-70,-1,-7,36, 
  /* [24][0][][] */ 37,-57,9,-45,49,-5,-27,0,42,40,59,93,-35,83,127,44, 
  /* [25][0][][] */ -127,-106,-48,22,22,24,23,-42,-70,4,-110,20,9,55,14,47, 
  /* [26][0][][] */ 20,-31,48,7,4,1,-47,59,-74,-84,-19,3,-4,-127,54,-30, 
  /* [27][0][][] */ -86,38,-49,42,31,-15,7,30,42,-21,127,23,-22,-5,-4,-32, 
  /* [28][0][][] */ -28,-11,23,35,0,0,9,88,32,17,-28,-2,-127,-7,-8,41, 
  /* [29][0][][] */ -13,64,40,-34,33,-20,18,-24,-127,22,-32,7,3,33,-87,20, 
  /* [30][0][][] */ -12,6,-127,-37,28,-51,6,18,-25,-18,-5,-11,-37,-31,4,21, 
  /* [31][0][][] */ 127,-41,-99,14,45,5,-36,52,-12,-3,-59,-35,22,-9,-81,19, 
  /* [32][0][][] */ -127,38,29,45,19,73,1,33,27,-12,118,7,-44,17,-20,-19, 
  /* [33][0][][] */ 8,-9,127,-14,-67,31,6,-41,-1,11,-14,23,-13,18,51,14, 
  /* [34][0][][] */ -7,-32,-39,-92,20,3,-27,-12,-22,-74,-35,-127,-13,9,26,3, 
  /* [35][0][][] */ 1,-46,42,50,54,-35,10,-25,-127,36,-23,23,-21,125,-42,-37, 
  /* [36][0][][] */ -104,44,-24,6,-15,35,29,97,1,38,127,-16,-8,22,25,-31, 
  /* [37][0][][] */ -39,10,127,-30,-82,-55,27,-28,25,30,0,9,8,-55,49,21, 
  /* [38][0][][] */ 15,-7,-6,44,48,-44,-50,28,-13,4,80,3,127,27,-26,3, 
  /* [39][0][][] */ -7,-15,-12,-35,-53,-75,70,127,-43,-17,0,-62,-4,50,40,55, 
  /* [40][0][][] */ 63,-14,-24,-10,-12,63,-24,-2,14,2,18,-7,127,0,-17,-11, 
  /* [41][0][][] */ -10,-9,-43,-127,19,-6,-15,-62,-7,-42,10,-33,3,-16,-11,39, 
  /* [42][0][][] */ 59,50,15,111,-110,5,-97,-3,-102,-68,72,-78,-56,127,-52,4, 
  /* [43][0][][] */ 6,98,-37,127,15,35,61,-77,-40,70,-23,30,13,-41,49,34, 
  /* [44][0][][] */ -7,-25,-127,16,50,71,-44,45,-29,-21,33,-20,0,-21,-41,6, 
  /* [45][0][][] */ -9,14,-23,-127,-35,-13,46,-13,-19,19,-29,8,7,-99,34,-23, 
  /* [46][0][][] */ 16,25,59,-7,22,7,-58,56,24,-50,-36,16,13,127,55,-22, 
  /* [47][0][][] */ 18,-24,25,-46,-41,17,-69,54,-10,-44,16,29,-3,-127,49,12, 
  /* [48][0][][] */ 9,-21,15,-127,-1,-19,-10,0,13,-44,10,-24,2,39,2,48, 
  /* [49][0][][] */ 25,-40,-7,101,79,-4,-7,51,-61,4,26,24,-7,45,127,0, 
  /* [50][0][][] */ -18,-33,63,-22,-12,127,-53,-103,62,-63,119,26,104,-31,18,-79, 
  /* [51][0][][] */ 20,43,6,21,20,-3,-45,14,38,-2,-2,127,9,23,24,-48, 
  /* [52][0][][] */ -38,46,127,0,32,-30,15,-54,-14,16,16,24,-8,78,-102,-16, 
  /* [53][0][][] */ -10,-16,-43,-127,-53,12,14,-32,-24,26,21,-9,10,-15,47,16, 
  /* [54][0][][] */ 10,18,-31,-46,10,9,-19,8,60,-11,6,-22,-10,127,15,21, 
  /* [55][0][][] */ -19,-27,-34,-3,9,-35,-12,-127,6,-89,-20,-7,-16,-75,-49,-15, 
  /* [56][0][][] */ 39,46,23,48,3,-25,10,127,19,-33,-3,-37,82,-20,-46,44, 
  /* [57][0][][] */ 77,-19,127,-27,-81,-62,-24,-50,39,14,-110,21,74,-55,62,33, 
  /* [58][0][][] */ 109,58,2,88,-127,-36,-16,42,-20,6,66,-43,-76,-36,-12,-72, 
  /* [59][0][][] */ 121,-35,-14,1,-27,-7,-4,15,-28,29,-127,-8,17,3,-8,33, 
  /* [60][0][][] */ -127,33,-1,-5,21,10,17,27,13,13,101,14,-29,-12,10,-15, 
  /* [61][0][][] */ -79,83,23,30,42,-17,-82,-68,127,-110,91,4,48,-62,-114,-60, 
  /* [62][0][][] */ -45,-55,-127,54,56,88,20,117,36,-69,59,-29,-89,6,-103,6, 
  /* [63][0][][] */ -50,16,127,-31,-65,-48,38,-24,7,22,0,20,-5,-43,61,23, 
  /* [64][0][][] */ 22,79,-3,33,49,3,102,-112,-10,127,14,-13,-8,-105,-13,60, 
  /* [65][0][][] */ 6,30,1,-21,61,18,27,-127,-38,-65,-24,-72,-16,-53,48,24, 
  /* [66][0][][] */ -127,9,-20,21,-46,30,24,-45,-78,-30,-95,55,59,28,53,82, 
  /* [67][0][][] */ -4,-45,-1,127,7,-11,-42,27,61,13,4,-20,-20,-42,-92,-26, 
  /* [68][0][][] */ 22,23,-18,127,-89,-42,7,-36,-79,43,17,-35,-39,-77,-26,-40, 
  /* [69][0][][] */ 88,69,17,110,39,-10,55,-127,16,100,17,54,2,-35,36,-5, 
  /* [70][0][][] */ 22,-30,3,-117,127,-27,66,23,95,-43,96,-57,29,115,78,127, 
  /* [71][0][][] */ 7,55,3,79,37,-127,-40,81,35,-89,12,13,10,-64,-52,41, 
  /* [72][0][][] */ -127,-71,4,40,18,47,-34,17,-63,-33,-82,39,44,18,4,90, 
  /* [73][0][][] */ -15,-1,-25,69,13,-35,0,3,72,24,-3,27,28,127,-64,-39, 
  /* [74][0][][] */ 80,-50,32,-21,-30,-22,49,-7,-22,0,-112,28,-127,-18,38,38, 
  /* [75][0][][] */ -18,-18,-17,127,-29,-3,-8,-9,-54,26,-16,-24,7,-37,-15,-33, 
  /* [76][0][][] */ -2,-21,-12,38,23,9,-35,-127,25,-118,13,10,-31,-24,45,-35, 
  /* [77][0][][] */ 127,-21,20,44,-35,-10,-49,6,33,-6,-40,63,36,7,-52,46, 
  /* [78][0][][] */ -13,-16,60,5,12,-15,-70,31,60,-25,-44,-44,10,127,41,-36, 
  /* [79][0][][] */ -1,17,49,18,47,59,-47,-48,12,-48,67,-10,127,-21,-28,-40, 
  /* [80][0][][] */ -105,-84,-71,127,19,35,34,-29,-95,37,-113,24,47,-92,-2,37, 
  /* [81][0][][] */ 61,9,-83,38,127,101,-48,-34,-20,-121,-41,-91,-24,-8,-119,40, 
  /* [82][0][][] */ 99,127,-11,28,-126,-26,-78,-6,-71,-6,96,-62,-43,82,5,-26, 
  /* [83][0][][] */ 127,42,11,-20,8,-14,-16,20,42,15,76,-36,-57,-23,-20,-80, 
  /* [84][0][][] */ 15,-40,-48,-38,29,11,-4,-127,-33,-37,32,6,-43,-20,10,-20, 
  /* [85][0][][] */ -28,-17,-48,-60,-8,-15,63,93,-3,127,-2,-49,39,68,64,-19, 
  /* [86][0][][] */ 75,-37,-17,5,14,-21,5,-25,-16,-13,-127,25,24,15,-7,29, 
  /* [87][0][][] */ -29,50,5,-51,-31,70,-22,61,-29,-43,45,1,27,-127,18,21, 
  /* [88][0][][] */ 10,-14,-86,-22,78,9,-16,-127,5,-13,-8,-1,-26,-21,23,-23, 
  /* [89][0][][] */ 26,-27,32,-127,28,-8,-78,102,103,-94,16,-7,-8,38,45,40, 
  /* [90][0][][] */ -7,13,-51,51,82,7,118,-104,59,127,-42,48,18,10,-30,-18, 
  /* [91][0][][] */ 39,-19,-47,-5,1,-127,-6,2,0,10,-51,-1,37,-16,15,40, 
  /* [92][0][][] */ 34,19,127,57,37,14,-1,33,-14,43,-57,8,17,56,4,-18, 
  /* [93][0][][] */ 127,-42,-45,0,-36,-51,14,47,-20,46,-117,-4,3,20,3,48, 
  /* [94][0][][] */ 17,-16,44,75,114,-31,-8,53,6,-19,0,57,-7,127,-25,-77, 
  /* [95][0][][] */ -123,38,45,41,21,52,29,14,3,4,127,10,-19,49,-30,-32, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00056253973161801696, 0.00096593063790351152, 0.00064932054374366999, 0.0028124609962105751, 0.0011059086536988616, 0.00060651684179902077, 0.00068620784441009164, 0.0019122392404824495, 0.001338906935416162, 0.00039868164458312094, 0.00061240559443831444, 0.001849096966907382, 0.0012724715052172542, 0.00035441716318018734, 0.00088499428238719702, 0.0011711330153048038, 0.00079951190855354071, 0.00062666815938428044, 0.0007518826168961823, 0.0022174261976033449, 0.0014352975413203239, 0.00050515553448349237, 0.00097106589237228036, 0.00068749056663364172, 0.00062096345936879516, 0.0012695075711235404, 0.0011056230869144201, 0.00073158566374331713, 0.001682853908278048, 0.0011718687601387501, 0.00068157125497236848, 0.00068278791150078177, 0.00045490372576750815, 0.0020721601322293282, 0.00079677876783534884, 0.0013046772219240665, 0.0003790359478443861, 0.0012563763884827495, 0.0015719908988103271, 0.00075700849993154407, 0.0020767925307154655, 0.00048500843695364892, 0.00056034949375316501, 0.00050144473789259791, 0.0011388394050300121, 0.00095558085013180971, 0.0005854760529473424, 0.0010723876766860485, 0.00094833615003153682, 0.00094300607452169061, 0.0013038795441389084, 0.0033932600636035204, 0.00053125969134271145, 0.00084065418923273683, 0.00093089707661420107, 0.0003607854014262557, 0.0013352771056815982, 0.00066789559787139297, 0.00084647373296320438, 0.0013941096840426326, 0.00042587527423165739, 0.00064905366161838174, 0.0011995321838185191, 0.0014492064947262406, 0.00055081461323425174, 0.00074978300835937262, 0.00098597793839871883, 0.0015364323044195771, 0.00033416168298572302, 0.00052562239579856396, 0.0005023402045480907, 0.0013372469693422318, 0.00089945422951132059, 0.0015592306153848767, 0.00093702413141727448, 0.0011068015592172742, 0.00029848245321772993, 0.0010814614361152053, 0.00036298390477895737, 0.0015101827448233962, 0.00051741010975092649, 0.0011188609059900045, 0.00067512027453631163, 0.0014503328129649162, 0.00068947678664699197, 0.00097101944265887141, 0.00081377447349950671, 0.00086165784159675241, 0.00049490941455587745, 0.0010052376892417669, 0.00065834005363285542, 0.0014018535148352385, 0.00044513202738016844, 0.00047731376253068447, 0.00097078346880152822, 0.00073613342829048634, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -38731, 2671, -578, -8171, 808, -7413, -11119, -41220, 6794, 22963, 34689, -9491, -4632, -20595, 39096, -44520, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00059579644585028291, 0.00079968653153628111, 0.00097673549316823483, 0.001070625614374876, 0.00068849854869768023, 0.0010425102664157748, 0.0012286093551665545, 0.00060476851649582386, 0.00077480630716308951, 0.00080034794518724084, 0.00085818924708291888, 0.0005494607612490654, 0.0011383914388716221, 0.0013578920625150204, 0.00054505129810422659, 0.00061922200256958604, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,-1,-27,7,18,0,2,108,-58,18,45,-8,16,-14,-9,15,12,-16,-11,-6,64,-9,18,127,-22,91,-4,-12,26,-14,24,-24,-15,50,23,-52,14,46,21,-12,-112,-24,14,41,39,24,-124,-47, 
  /* [1][0][][] */ -34,-8,18,19,-25,12,1,51,-49,-37,6,-41,-23,-14,5,-3,-26,117,-5,18,11,4,-31,-19,25,-37,18,20,-24,-80,-36,24,-18,-7,33,2,-3,-37,-3,13,-20,-32,127,15,5,-4,25,-6, 
  /* [2][0][][] */ -24,-4,-12,-34,-3,-67,8,-20,-1,14,13,30,16,18,-16,9,-4,-18,-27,-10,-6,3,-4,-127,-13,83,-16,6,3,-16,0,-4,-8,58,9,-4,20,8,29,5,-37,5,-20,-10,0,-15,16,7, 
  /* [3][0][][] */ -8,32,6,-29,-1,-5,0,-3,-18,-5,2,41,-127,4,-6,-4,1,6,-18,-2,-30,8,6,18,-6,-12,4,22,-10,19,7,19,1,3,17,20,-10,23,40,9,13,6,26,-29,9,-5,4,18, 
  /* [4][0][][] */ 37,-33,7,12,24,26,23,-27,-26,-1,-12,-22,4,8,1,16,24,-6,-78,0,-10,11,20,72,0,-26,2,43,8,-80,19,14,11,-37,40,-127,16,34,-4,27,-21,18,12,-26,-13,-17,14,9, 
  /* [5][0][][] */ 28,2,-18,56,1,-5,11,25,0,-2,40,12,2,54,-2,1,-24,19,26,6,7,5,0,-27,0,-47,3,-18,-3,-9,5,6,66,-127,4,27,-15,-15,16,8,-91,59,17,-7,-4,-5,-99,-6, 
  /* [6][0][][] */ 23,-1,3,5,-13,-3,2,-14,-2,7,-2,7,-18,10,6,5,-2,-12,127,7,4,8,18,-37,2,4,24,-11,-14,0,-4,5,3,-14,30,-38,-4,-41,70,11,-3,-3,-6,5,-9,0,7,-6, 
  /* [7][0][][] */ -44,-16,-2,33,-15,78,-4,47,-5,28,-10,127,80,-7,-14,-3,-3,-23,-10,-16,-31,-3,-20,71,1,-42,-51,-32,-10,-17,-11,-5,0,3,-25,5,9,-59,97,-3,26,26,-66,-58,20,-8,1,1, 
  /* [8][0][][] */ -51,-54,-5,0,-2,1,2,29,-3,-68,2,41,59,4,7,10,-11,66,-34,4,-50,23,-8,-14,-4,0,0,44,-5,114,-10,26,-3,2,-21,-127,-115,64,27,35,18,-5,106,-22,7,31,23,30, 
  /* [9][0][][] */ -26,-1,-5,25,13,-30,-6,0,52,-38,7,52,-49,5,7,-1,-4,20,-38,-23,48,7,-10,-17,2,5,43,-23,15,9,7,7,-1,20,70,-101,-4,-127,-89,8,-25,29,49,5,7,11,-13,-40, 
  /* [10][0][][] */ -20,-12,-39,-127,47,80,11,-12,1,32,18,7,54,-50,-29,28,33,-41,52,-33,27,-23,32,51,-55,-107,1,-35,54,34,43,-35,-28,-81,28,-8,18,-46,3,-30,-37,-67,-10,10,10,9,20,-29, 
  /* [11][0][][] */ -2,53,5,64,30,-73,-84,-16,-5,64,-19,-2,-8,54,-5,-85,25,47,-1,-10,-66,-106,17,5,6,-51,24,-19,56,-47,29,-86,45,-16,-41,-99,103,15,8,-127,-1,77,100,-81,-3,-52,28,33, 
  /* [12][0][][] */ 127,1,-20,11,0,21,1,105,15,-8,-59,-24,-3,6,-12,-4,-6,6,-5,0,8,6,7,23,-3,13,-2,8,-7,11,-9,-4,4,-62,-10,9,-12,-18,-25,-3,-13,-77,6,-127,-56,-12,75,-6, 
  /* [13][0][][] */ 9,1,-4,4,7,-12,0,0,-2,6,5,22,-3,4,8,-1,3,2,9,1,12,-13,10,-5,2,0,16,127,12,-4,8,0,5,-1,-38,20,8,-5,4,-13,-13,-4,-2,6,2,-1,-8,-13, 
  /* [14][0][][] */ 63,-27,41,-69,50,36,39,-100,-53,-56,-2,126,-77,-5,71,12,52,21,-50,66,26,19,75,-21,28,55,-23,-113,24,-29,56,45,-1,69,-127,-47,-44,51,88,2,-41,9,57,5,-1,11,14,-34, 
  /* [15][0][][] */ -4,-46,-70,-35,55,37,75,-54,-4,18,-8,-38,82,19,-94,57,55,54,82,-81,-105,-23,62,-23,-89,41,32,52,48,44,47,-49,30,53,96,127,-12,-105,-11,-31,86,63,117,-49,-7,-27,-10,61, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.025321347638964653, 0.03398667648434639, 0.041511259973049164, 0.045501586049795151, 0.029261188581585884, 0.044306684285402298, 0.052215896546840668, 0.025702660903334618, 0.032929267734289169, 0.034014787524938583, 0.036473043262958527, 0.023352082818746567, 0.048381634056568146, 0.057710412889719009, 0.023164680227637291, 0.026316935196518898, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 3282, 32638, -909, 49464, 4455, 125741, -2157, 50839, 7614, 29886, 28616, 2254, -332, 33550, -1614, -1590, -396, 1762, 2784, -2353, 234, -3422, -18, -23053, -5160, 42102, 132085, 102444, 2523, 1636, -2876, 886, 26479, -1443, 23307, 521, 34820, 3903, 63589, 2207, -1321, 57402, 697, 6303, 46374, 13, 3694, 51661, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.4475676228757948e-05, 4.0479699237039313e-05, 0.00016774682444520295, 4.7794786951271817e-05, 0.00013149312871973962, 6.9312620325945318e-05, 0.00016619876259937882, 0.00011318956239847466, 5.5156007874757051e-05, 3.862947050947696e-05, 5.8419911511009559e-05, 9.3845294031780213e-05, 4.5439755922416225e-05, 4.1895542381098494e-05, 0.00016819006123114377, 0.00021485060278791934, 0.00019439097377471626, 6.3844134274404496e-05, 0.00011334188457112759, 0.00014535230002366006, 0.00010650554759195074, 0.0002395010378677398, 0.00010024350922321901, 0.00015585140499752015, 0.00011331882706144825, 0.00010847977682715282, 3.1599844078300521e-05, 6.9202120357658714e-05, 0.00011847995483549312, 0.00013212552585173398, 0.00011111403000541031, 0.00017571635544300079, 5.8534184063319117e-05, 0.00020251914975233376, 3.1824274628888816e-05, 5.4316806199494749e-05, 0.00016568790306337178, 8.3365273894742131e-05, 8.8018539827316999e-05, 0.00010284034215146676, 0.00014286229270510375, 0.00010322182788513601, 8.8086555479094386e-05, 6.9718982558697462e-05, 2.6808085749507882e-05, 0.00015808703028596938, 9.0010500571224838e-05, 2.720147131185513e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-94,97,72,54,-34,107,-64,61,-89,-79,48,52,-42,-71,-89,102,78,49,77,66,-74,-83,51,-32,-40,-65,-66,-66,60,-63,-113,-12,41,69,63,-64,54,-50,-23,51,-72,57,62,-94,10,76,-32, 82,-98,127,86,-77,-68,-56,-84,98,-103,-63,75,80,-108,-94,92,-40,95,83,127,84,-114,53,71,-51,-77,-69,-81,57,78,-31,-127,-85,80,81,83,-81,83,-83,-16,76,-94,81,89,-74,-127,95,-102, 35,-49,71,38,18,-41,-47,-38,42,-32,7,34,29,-79,-55,-1,-54,36,35,69,32,-53,32,25,-27,-45,-45,-23,31,30,88,-88,-86,45,36,34,-29,39,-38,-9,40,-41,33,43,-5,-10,37,-71, 
  /* [0][1][][] */ 90,-113,-42,94,56,-82,127,-90,88,-114,-70,81,83,-109,-12,-127,127,109,74,-39,84,107,-127,73,74,-75,-93,-100,-127,85,-70,-9,-88,70,106,96,-85,80,-80,89,85,-101,88,91,-90,106,95,-91, 127,-127,-67,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,97,-67,127,127,-50,127,127,68,127,127,-127,-127,-127,54,127,-30,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 65,-78,-33,65,38,-62,-48,-62,55,-43,-59,59,48,-53,-17,10,-64,49,58,-30,56,64,52,64,66,-64,-63,-45,37,55,127,15,-62,71,49,50,-49,59,-60,56,60,-58,54,62,-60,-67,59,-56, 
  /* [0][2][][] */ 44,-52,-48,49,26,-52,62,-43,40,-72,-5,38,56,-70,82,-80,74,51,35,-32,25,-10,-77,30,-25,-44,-47,-49,-75,31,-40,90,-74,36,49,43,-27,36,-43,-87,47,-50,41,45,-24,15,40,-72, 72,-75,-49,78,-57,-63,-73,-68,50,-77,-67,60,74,-47,127,32,-47,59,63,-43,54,-18,42,67,-48,-66,-77,-61,32,61,-23,116,-55,64,57,58,-50,61,-67,-106,69,-67,61,62,-85,49,63,-53, 41,-42,-27,45,28,-20,-18,-35,13,-26,-50,28,31,2,68,24,-36,21,29,-32,28,0,38,42,-23,-30,-48,-24,34,34,62,66,0,35,17,24,-23,29,-28,-56,29,-32,27,29,-62,8,31,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031652161851525307, 0.0017203871393576264, 0.0071292398497462273, 0.0020312783308327198, 0.0055884579196572304, 0.0029457863420248032, 0.0070634470321238041, 0.0048105563037097454, 0.0023441303055733442, 0.0016417524311691523, 0.0024828461464494467, 0.0039884247817099094, 0.0019311895594000816, 0.0017805605893954635, 0.0071480772458016872, 0.0091311503201723099, 0.0082616163417696953, 0.0027133757248520851, 0.0048170299269258976, 0.0061774724163115025, 0.0045264856889843941, 0.010178794153034687, 0.0042603490874171257, 0.0066236844286322594, 0.0048160501755774021, 0.0046103904023766518, 0.0013429933460429311, 0.002941089915111661, 0.0050353980623185635, 0.0056153344921767712, 0.0047223460860550404, 0.0074679451063275337, 0.0024877027608454227, 0.0086070634424686432, 0.0013525317190214992, 0.0023084641434252262, 0.0070417360402643681, 0.0035430239513516426, 0.0037407879717648029, 0.0043707145377993584, 0.0060716471634805202, 0.0043869274668395519, 0.0037436785642057657, 0.0029630567878484726, 0.0011393435997888446, 0.0067186988890171051, 0.0038254461251199245, 0.001156062469817698, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 590, 845, 2016, 442, 8425, 14084, 1992, -66, -639, -498, 1096, 832, 3017, 1142, 20980, 2413, 1869, -921, -311, 2795, -1583, 10359, 9801, 9539, 4302, 252, 3339, 3734, 7105, -457, 9770, 5490, 563, -254, 4022, 3189, -1565, 208, -537, 4737, 885, -600, -846, 71, 903, 2878, 670, 865, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00041358385351486504, 0.00083144288510084152, 0.00028242194093763828, 0.0003478901635389775, 0.00025754835223779082, 0.00028786575421690941, 0.00056149729061871767, 0.00027109452639706433, 0.00042082727304659784, 0.00090061977971345186, 0.00092447717906907201, 0.00034297493402846158, 0.00042416050564497709, 0.00068496132735162973, 0.00017171162471640855, 0.00051625905325636268, 0.00027083914028480649, 0.00043423997703939676, 0.00029430072754621506, 0.00032675382681190968, 0.00039206878864206374, 0.00024657062022015452, 0.00037418337888084352, 0.00016512704314664006, 0.0003713172918651253, 0.00030814303318038583, 0.0020868778228759766, 0.00050207495223730803, 0.0002445747668389231, 0.00049076159484684467, 0.00026985240401700139, 0.00022013411216903478, 0.00069057522341609001, 0.00024824924184940755, 0.00091730750864371657, 0.00057068717433139682, 0.00088570330990478396, 0.00042258875328116119, 0.00027107595815323293, 0.00039576028939336538, 0.00017471516912337393, 0.00026955676730722189, 0.0003527080116327852, 0.00031041342299431562, 0.0021614993456751108, 0.00048568221973255277, 0.00033219897886738181, 0.001369707053527236, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,6,1,78,-40,47,23,-37, 
  /* [1][0][][] */ 34,71,47,18,17,-49,112,127, 
  /* [2][0][][] */ -27,-5,1,-3,-127,-8,4,-1, 
  /* [3][0][][] */ 103,-1,-8,-114,-127,23,38,-22, 
  /* [4][0][][] */ -127,51,-30,-7,67,-22,66,33, 
  /* [5][0][][] */ -93,-24,23,-4,-127,11,8,80, 
  /* [6][0][][] */ -8,-127,24,-20,12,-3,-5,29, 
  /* [7][0][][] */ -70,-6,-3,100,127,-34,-35,7, 
  /* [8][0][][] */ 85,7,7,-127,-3,-25,-42,-41, 
  /* [9][0][][] */ 1,-127,-14,-7,6,85,-56,88, 
  /* [10][0][][] */ -105,-9,-1,25,-127,76,62,-17, 
  /* [11][0][][] */ 107,16,43,19,-60,-45,-31,-127, 
  /* [12][0][][] */ -5,17,45,-6,13,-86,127,61, 
  /* [13][0][][] */ 56,-29,-12,-21,127,118,116,-37, 
  /* [14][0][][] */ 127,39,-37,36,-104,-20,-19,5, 
  /* [15][0][][] */ -8,-127,13,-16,4,3,10,36, 
  /* [16][0][][] */ -55,-14,-2,7,-127,-8,19,10, 
  /* [17][0][][] */ -22,94,-118,6,15,-127,98,-80, 
  /* [18][0][][] */ 127,-26,-39,11,-56,25,8,100, 
  /* [19][0][][] */ 127,-50,-16,-9,36,5,27,3, 
  /* [20][0][][] */ 127,29,-8,116,1,42,1,-59, 
  /* [21][0][][] */ 11,38,-62,1,-27,93,-127,-101, 
  /* [22][0][][] */ -127,25,39,-17,-39,19,-60,-36, 
  /* [23][0][][] */ -47,-63,2,23,-127,69,78,-14, 
  /* [24][0][][] */ 127,-7,-12,-2,-77,-6,1,0, 
  /* [25][0][][] */ 22,-17,0,-24,127,48,50,-26, 
  /* [26][0][][] */ 6,-103,10,-47,3,-127,81,-62, 
  /* [27][0][][] */ -16,-127,24,-12,-5,-52,29,-12, 
  /* [28][0][][] */ -83,22,-27,2,-14,-12,127,89, 
  /* [29][0][][] */ -9,44,14,2,-4,39,-97,-127, 
  /* [30][0][][] */ 127,-16,23,-11,-95,19,-73,-49, 
  /* [31][0][][] */ -5,-47,52,-9,20,-114,127,84, 
  /* [32][0][][] */ -81,20,7,4,-127,-102,-100,51, 
  /* [33][0][][] */ -23,11,-4,24,-127,-61,-47,16, 
  /* [34][0][][] */ 17,-127,51,-13,-6,86,-78,63, 
  /* [35][0][][] */ -23,-51,-127,-12,-5,-63,42,-59, 
  /* [36][0][][] */ 10,127,54,5,-15,11,-19,-36, 
  /* [37][0][][] */ -127,34,35,-14,56,-34,-13,-102, 
  /* [38][0][][] */ -127,-13,-48,-16,38,20,36,109, 
  /* [39][0][][] */ 16,-48,78,-5,4,-82,127,99, 
  /* [40][0][][] */ -40,-24,-18,-46,-127,115,127,-29, 
  /* [41][0][][] */ -127,41,4,-75,-82,-81,-89,44, 
  /* [42][0][][] */ -36,-127,-106,-8,-7,62,-116,-75, 
  /* [43][0][][] */ -67,4,-15,-127,95,50,58,4, 
  /* [44][0][][] */ 127,-12,14,-93,27,-25,-13,38, 
  /* [45][0][][] */ -17,-127,-12,-12,-15,-69,81,1, 
  /* [46][0][][] */ 105,-8,-7,-28,127,-38,-28,5, 
  /* [47][0][][] */ 127,8,5,110,-3,28,10,-49, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070428272010758519, 0.0014158455887809396, 0.00048093002988025546, 0.00059241440612822771, 0.00043857333366759121, 0.00049020018195733428, 0.00095616123871877789, 0.00046164082596078515, 0.00071661738911643624, 0.0015336453216150403, 0.0015742715913802385, 0.00058404437731951475, 0.0007222934509627521, 0.001166405389085412, 0.00029240388539619744, 0.00087912601884454489, 0.00046120592742227018, 0.00073945755138993263, 0.00050115812337026, 0.00055642181541770697, 0.00066764518851414323, 0.00041987962322309613, 0.00063718855381011963, 0.00028119116905145347, 0.00063230795785784721, 0.00052472989773377776, 0.0035536978393793106, 0.00085497228428721428, 0.00041648090700618923, 0.0008357070037163794, 0.00045952561777085066, 0.00037486146902665496, 0.0011759651824831963, 0.00042273811413906515, 0.0015620625345036387, 0.00097181048477068543, 0.0015082444297149777, 0.00071961694629862905, 0.00046160919009707868, 0.00067393138306215405, 0.00029751856345683336, 0.00045902220881544054, 0.0006006186013109982, 0.00052859610877931118, 0.0036807691212743521, 0.00082705740351229906, 0.00056569423759356141, 0.0023324436042457819, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -39285, 25519, -13552, -11020, 19830, -3391, 33254, 44476, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00049254513578489423, 0.00075028697028756142, 0.0015776382060721517, 0.001625118893571198, 0.00084548385348170996, 0.0005712848505936563, 0.00072331953560933471, 0.00098157732281833887, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -45,-19,-37,10,5,-22,-1,-6,-107,127,-39,109,109,14,75,-24,-4,-32,11,6,-13,-3,-23,-34,26,-94,12,60,-10,7,13,-33,6,-71,103,21,-8,-5,-5,-21,113,2,49,-20,-29,25,-9,-21, 
  /* [1][0][][] */ 3,32,127,5,-2,-17,-5,-78,26,1,25,3,-24,5,-9,-114,10,-58,8,6,-25,30,21,-34,-17,-5,12,-1,14,-5,13,0,-3,15,17,17,-15,-30,62,-57,8,41,-13,28,-15,-1,28,-4, 
  /* [2][0][][] */ 4,-55,15,-46,31,32,-8,-27,6,2,-6,17,-15,57,10,2,-36,127,-23,-31,-19,25,-42,-13,122,2,-2,-4,-21,-15,1,-37,-4,-16,-2,8,-13,-3,-16,4,15,-19,-16,-2,0,24,-20,-42, 
  /* [3][0][][] */ -2,-92,-7,3,-2,-3,-14,-5,-6,-9,13,19,9,-10,51,-2,-10,-24,6,23,-11,20,-26,6,3,56,-2,4,-8,4,127,-3,10,6,-6,1,-25,-17,-10,9,-9,12,-9,27,-9,0,4,30, 
  /* [4][0][][] */ -101,11,0,10,2,-31,-4,2,37,-35,20,-21,-35,4,-7,2,3,6,5,22,5,-29,13,5,-8,41,2,110,-1,0,-13,-29,2,-127,-34,10,5,-9,8,-1,-48,-7,-6,18,-57,6,10,8, 
  /* [5][0][][] */ -26,26,18,8,-46,7,-2,48,20,10,8,3,-10,-41,16,36,-7,-83,23,3,39,-44,4,35,11,4,-77,-39,-34,-42,15,-6,0,-70,5,-62,57,10,-40,7,20,-38,11,7,127,-12,-34,-4, 
  /* [6][0][][] */ -26,-24,-20,-6,37,-32,5,-29,-12,-11,40,-25,-9,39,-10,-59,-4,4,0,-27,-29,46,-8,-73,1,-4,-50,-66,20,51,-16,-1,0,-55,-13,62,-62,-53,9,-49,-6,6,9,45,127,-32,33,15, 
  /* [7][0][][] */ 9,33,-75,24,-24,11,5,54,-8,-4,60,-28,10,-30,-4,-6,-19,-127,34,-43,56,36,14,-55,17,-26,25,5,-22,23,-16,1,4,33,0,-27,-9,-57,-36,-64,-12,-23,44,58,-27,-18,-1,2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020933168008923531, 0.031887196004390717, 0.067049622535705566, 0.06906755268573761, 0.035933062434196472, 0.024279605597257614, 0.030741078779101372, 0.041717037558555603, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52480, -129, 8772, 463, 5778, -5705, 1536, 21532, 643, 28706, -2394, 20172, -5970, -981, 23715, 3825, 238, 18114, 32608, 10907, -75, -387, 74, 10792, -8384, 24429, 46072, 35138, 3603, 235, -1763, 1446, 666, 17963, -6943, 13130, -10790, 18905, -22399, 103409, 18123, 22448, 9227, -1773, 15627, 3536, 1063, -318, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034794246312230825, 0.00031396604026667774, 0.00018382321286480874, 0.00028999475762248039, 0.00014137962716631591, 0.00010031287820311263, 0.00072164536686614156, 0.00016172206960618496, 0.00017103918071370572, 0.00016886643425095826, 0.00010110751463798806, 0.00021494024258572608, 0.00032208822085522115, 0.00020621075236704201, 0.00010586913413135335, 0.00039426324656233191, 0.0001927744597196579, 0.00022253184579312801, 7.053238368825987e-05, 0.00016488548135384917, 0.0002323225635336712, 0.00019982087542302907, 0.00019471962878014892, 0.00019681167032103986, 0.00015977139992173761, 0.00015150549006648362, 0.00066707230871543288, 9.6452939033042639e-05, 0.00017120415577664971, 0.0031912853009998798, 9.7843658295460045e-05, 0.00016320891154464334, 0.001228660810738802, 0.00016308345948345959, 0.00019035061995964497, 0.00019137877097819, 0.00039492658106610179, 0.00013371830573305488, 0.00027653839788399637, 2.3106420485419221e-05, 0.00017954841314349324, 6.5888474637176841e-05, 0.00018124267808161676, 0.00017973646754398942, 0.00015410177002195269, 0.00011857665231218562, 0.00026379688642919064, 0.0001324545155512169, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,107,4,80,0,28,15,8,9,7,-8,-9,-45,8,-2,8,-23,-113,-7,-23,127,-10,-2,7,-5,8,-5,6,16,98,20,28,38,-28,1,35,-2,1,18,-69,-9,-8,17,2,-6,-10, 127,9,15,-127,28,86,11,11,123,127,8,43,-50,-24,5,7,127,-56,-59,-55,-101,24,-108,14,18,71,-31,-83,23,22,9,-125,6,-61,127,9,-40,-47,-6,115,-79,-98,-31,3,-34,-9,-127,23, -32,-3,8,13,-1,64,4,17,27,8,-13,31,-15,-4,15,3,-103,29,-3,78,-31,-13,-17,-7,-5,-59,-3,29,-16,6,4,-23,9,-24,16,-19,0,48,42,-12,50,37,-16,11,-44,2,-2,-7, 
  /* [0][1][][] */ 127,6,1,-98,14,-27,36,-16,9,9,-12,53,-7,-1,18,-33,0,-50,-59,-85,10,-74,-124,-19,5,98,-14,-127,-9,33,12,-109,17,-53,-3,127,-3,59,-43,40,-62,-127,39,-88,-44,-15,-13,-5, 27,-127,-127,113,-127,-127,-127,-127,-127,-96,127,-127,127,127,34,-127,-83,127,127,-105,127,127,112,127,127,-127,-127,27,-127,-127,94,127,-127,127,-28,-42,127,-127,127,127,127,-81,127,127,127,-123,100,108, 55,6,49,-14,5,-60,44,18,-23,14,-104,-8,0,-41,127,4,63,-66,-72,86,14,-47,11,-34,1,5,-38,67,20,40,1,2,33,-45,8,67,-5,65,68,-10,-81,7,-85,-31,26,-17,-11,5, 
  /* [0][2][][] */ -54,-7,26,-17,8,34,-37,23,9,-23,12,32,6,-7,-39,17,5,22,-12,105,7,-31,-16,-13,-3,22,0,50,-10,3,48,-33,-18,-44,-31,-40,0,31,7,-22,9,-4,42,-37,-35,18,-10,18, 69,126,75,22,16,-20,124,35,18,-3,43,26,-5,-1,-92,24,-58,-57,-36,122,-36,49,11,19,32,-62,-41,29,76,1,127,21,85,-26,7,-36,-25,-17,-14,118,-28,-13,-41,45,21,-33,7,-127, -42,-4,7,-3,4,-5,-61,8,-17,-10,-40,-40,20,-9,-9,11,33,24,-10,-127,24,-9,4,-9,-6,10,-10,-54,-15,8,6,7,-20,87,-37,-23,-5,37,25,-60,4,7,-38,7,-43,127,-6,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014787554740905762, 0.01334355678409338, 0.0078124864958226681, 0.01232477743178606, 0.006008633878082037, 0.004263297189027071, 0.030669927597045898, 0.0068731880746781826, 0.0072691650129854679, 0.0071768234483897686, 0.0042970692738890648, 0.0091349603608250618, 0.013688748702406883, 0.0087639568373560905, 0.0044994382187724113, 0.016756188124418259, 0.0081929145380854607, 0.0094576030969619751, 0.0029976263176649809, 0.0070076328702270985, 0.0098737087100744247, 0.0084923868998885155, 0.0082755843177437782, 0.0083644958212971687, 0.0067902845330536366, 0.0064389831386506557, 0.028350573033094406, 0.0040992498397827148, 0.0072761764749884605, 0.13562962412834167, 0.0041583552956581116, 0.0069363787770271301, 0.052218083292245865, 0.0069310469552874565, 0.0080899009481072426, 0.0081335976719856262, 0.016784379258751869, 0.0056830276735126972, 0.011752881109714508, 0.00098202284425497055, 0.0076308073475956917, 0.002800260204821825, 0.007702813483774662, 0.0076387994922697544, 0.0065493248403072357, 0.0050395075231790543, 0.011211367323994637, 0.0056293169036507607, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 46749, 6138, 5558, 6420, 1196, 8759, -1385, -235, 800, 1727, 2732, 259, 1545, -619, 602, -1721, 4132, 9801, -198, 22135, 3155, 2748, 6504, -435, 2744, 3864, 24391, 9402, -54, -2237, 137, 2010, -1966, 8338, 2630, 5948, 6365, 4068, 20714, 1661, -711, 2261, 1001, 3452, 4210, 2022, -1279, 2331, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.2161026259418577e-05, 0.00036548406933434308, 0.00027547808713279665, 0.00050100393127650023, 0.0018689301796257496, 0.00057588581694290042, 0.0013746073236688972, 0.0013136035995557904, 0.00071590056177228689, 0.00078100821701809764, 0.00081723788753151894, 0.00058439868735149503, 0.00063144968589767814, 0.0007222960120998323, 0.00069938861997798085, 0.0021019545383751392, 0.00039549093344248831, 0.00043214936158619821, 0.0025262059643864632, 0.0001216096497955732, 0.00038880540523678064, 0.00036599274608306587, 0.0006081036408431828, 0.0011723393108695745, 0.00044564963900484145, 0.00030118424911051989, 0.00016666360897943377, 0.00038988937740214169, 0.0011296379379928112, 0.0011624128092080355, 0.00061524618649855256, 0.00042350980220362544, 0.0010211624903604388, 0.00026256649289280176, 0.00039991081575863063, 0.00031260104151442647, 0.00057739083422347903, 0.00032792764250189066, 0.00011494008504087105, 0.0027374834753572941, 0.00082205201033502817, 0.0012158469762653112, 0.00050618068780750036, 0.00043028019717894495, 0.00028545546228997409, 0.0005515933153219521, 0.00088718760525807738, 0.0011468118755146861, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 74,27,5,-7,127,35,-50,-29, 
  /* [1][0][][] */ -2,-5,3,127,12,-6,12,12, 
  /* [2][0][][] */ 38,-127,-24,38,-11,-71,84,11, 
  /* [3][0][][] */ 127,-25,0,16,-16,-25,22,-1, 
  /* [4][0][][] */ 5,-35,127,-16,-6,-55,5,-87, 
  /* [5][0][][] */ 57,-3,0,-8,127,12,-3,8, 
  /* [6][0][][] */ -19,78,-3,127,28,46,-53,-48, 
  /* [7][0][][] */ -6,127,-2,2,0,-12,13,-5, 
  /* [8][0][][] */ 127,62,5,9,-52,-22,-9,-39, 
  /* [9][0][][] */ -127,19,5,18,39,9,-5,0, 
  /* [10][0][][] */ -75,-10,19,127,45,19,-20,6, 
  /* [11][0][][] */ -127,4,13,-63,40,4,-21,-47, 
  /* [12][0][][] */ 127,29,1,20,-47,-10,2,-50, 
  /* [13][0][][] */ -19,80,-127,-10,-2,116,-71,77, 
  /* [14][0][][] */ -56,-21,4,127,15,13,4,-29, 
  /* [15][0][][] */ -4,127,1,0,1,-20,15,-48, 
  /* [16][0][][] */ -8,-127,-22,5,-17,-113,105,-22, 
  /* [17][0][][] */ 22,127,2,-12,3,83,-96,-20, 
  /* [18][0][][] */ 0,43,-127,-5,-2,56,-25,59, 
  /* [19][0][][] */ -66,19,-2,-8,-127,4,15,29, 
  /* [20][0][][] */ -127,-18,-1,3,62,-33,31,-1, 
  /* [21][0][][] */ -81,-4,1,3,-127,-5,16,7, 
  /* [22][0][][] */ -127,-19,10,8,71,-9,38,46, 
  /* [23][0][][] */ -19,-20,-6,-8,-6,78,-127,-92, 
  /* [24][0][][] */ -11,45,-127,3,8,48,-19,83, 
  /* [25][0][][] */ 81,-50,-5,127,-58,-15,17,-37, 
  /* [26][0][][] */ -1,-19,1,-2,-7,127,127,-29, 
  /* [27][0][][] */ 78,-13,2,21,127,30,42,-18, 
  /* [28][0][][] */ -5,127,-77,-6,1,75,-24,125, 
  /* [29][0][][] */ -15,12,1,-12,0,95,-127,-87, 
  /* [30][0][][] */ 6,-1,4,-127,-6,3,-6,-18, 
  /* [31][0][][] */ -62,-6,-1,5,-127,7,18,2, 
  /* [32][0][][] */ -15,33,9,-127,8,32,-92,-112, 
  /* [33][0][][] */ -65,-5,0,3,-127,42,41,0, 
  /* [34][0][][] */ -127,87,11,32,49,-30,20,11, 
  /* [35][0][][] */ -3,127,-14,5,2,-78,74,-53, 
  /* [36][0][][] */ -8,49,2,-35,-8,100,-127,-32, 
  /* [37][0][][] */ 45,-77,-3,27,14,-127,117,-11, 
  /* [38][0][][] */ 1,-127,-3,-13,8,54,-49,56, 
  /* [39][0][][] */ 7,-127,-16,-10,-8,-10,-46,-95, 
  /* [40][0][][] */ 119,41,6,-3,-34,72,-127,-91, 
  /* [41][0][][] */ 7,-127,10,1,-5,73,-51,124, 
  /* [42][0][][] */ 56,3,6,-127,-42,-7,-6,-32, 
  /* [43][0][][] */ -111,-29,29,-127,76,16,-22,-4, 
  /* [44][0][][] */ 3,-39,-7,8,-21,99,127,-10, 
  /* [45][0][][] */ -127,-57,-9,8,26,7,33,-15, 
  /* [46][0][][] */ 10,84,127,3,1,21,4,15, 
  /* [47][0][][] */ 2,8,15,127,13,7,4,0, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00019138993229717016, 0.00075899728108197451, 0.0005720827030017972, 0.0010404301574453712, 0.0038811895065009594, 0.0011959365801885724, 0.0028546340763568878, 0.0027279481291770935, 0.0014867038698866963, 0.0016219123499467969, 0.0016971501754596829, 0.0012136151781305671, 0.001311325584538281, 0.001499985228292644, 0.0014524137368425727, 0.0043651089072227478, 0.00082131224917247891, 0.00089744047727435827, 0.0052461479790508747, 0.0002525456075090915, 0.00080742849968373775, 0.00076005363371223211, 0.001262843026779592, 0.0024345859419554472, 0.00092547637177631259, 0.00062546646222472191, 0.00034610874718055129, 0.00080967956455424428, 0.0023459084331989288, 0.0024139715824276209, 0.0012776758521795273, 0.00087949878070503473, 0.0021206384990364313, 0.00054526934400200844, 0.00083049101522192359, 0.00064917560666799545, 0.001199062098748982, 0.00068100419593974948, 0.0002386949781794101, 0.0056849056854844093, 0.0017071475740522146, 0.0025249379687011242, 0.0010511806467548013, 0.00089355878299102187, 0.00059280265122652054, 0.0011454885825514793, 0.001842414028942585, 0.0023815734311938286, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5938, -24256, 26055, 21291, 6087, 2199, 34855, 9960, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011763384100049734, 0.0006871274090372026, 0.0014190067304298282, 0.0011554600205272436, 0.0011944142170250416, 0.0012148574460297823, 0.00083182123489677906, 0.00074872927507385612, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,1,9,-95,7,27,5,8,4,5,2,-6,98,0,2,5,0,-6,-5,-1,80,-2,1,5,31,36,12,11,4,5,2,-127,10,6,-2,-1,-26,2,-15,34,8,-26,-9,6,0,-2,6,3, 
  /* [1][0][][] */ -41,-5,0,-1,49,26,-28,79,18,7,-32,-21,11,0,20,40,0,41,21,-48,-1,20,127,20,-29,-1,56,8,20,-4,17,-9,13,-7,-8,-19,6,-55,10,1,-8,-5,-81,-8,-31,3,-49,-96, 
  /* [2][0][][] */ -60,13,1,14,43,-13,25,29,-12,58,6,-10,1,0,13,54,0,15,-127,22,5,15,5,-12,-30,-4,41,8,7,28,22,6,0,-5,-10,-15,11,3,-1,2,37,-5,-35,4,20,-55,22,11, 
  /* [3][0][][] */ 2,0,-2,6,-4,30,3,-2,66,16,-2,2,28,0,-31,-6,0,-2,-8,1,-3,-2,5,-19,-10,-4,-8,-5,-7,-4,0,-5,-46,43,-52,-1,6,1,6,-127,1,4,3,-52,0,-5,1,7, 
  /* [4][0][][] */ -3,-5,77,38,2,-21,0,-3,6,-4,-3,-12,-86,0,-12,7,0,12,7,3,68,6,0,-7,-15,28,-9,45,-9,-1,0,98,5,7,-1,-3,14,-15,-14,-18,-2,-127,5,-2,3,-6,3,4, 
  /* [5][0][][] */ -8,40,6,-6,3,46,25,12,-20,30,9,50,22,0,-127,0,0,13,-37,21,-12,10,-13,40,-20,-6,28,-2,-14,21,25,-16,51,30,-39,-5,5,19,-45,17,24,-12,-11,27,23,58,23,24, 
  /* [6][0][][] */ -19,-52,4,7,39,-41,-19,6,24,-26,-12,90,-3,0,-127,40,0,-7,46,-17,-3,3,24,-37,32,3,-5,-13,45,-12,-9,0,94,-31,28,0,2,-7,-68,-23,-11,-18,-4,-30,-23,-79,-18,-26, 
  /* [7][0][][] */ -118,-22,-12,9,127,24,64,30,19,8,28,-35,-29,0,87,104,0,13,1,61,-13,-3,-29,46,21,5,51,3,48,59,55,-5,-8,-14,-23,-25,7,26,29,35,74,4,-29,-14,58,1,67,80, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.049994383007287979, 0.029202913865447044, 0.060307785868644714, 0.049107048660516739, 0.050762604922056198, 0.051631439477205276, 0.035352401435375214, 0.03182099387049675, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 60278, 61091, 61094, 43403, -510, 14055, 3017, 24423, 26541, 21217, 28820, 216, -47159, -127, 37872, 789, -204, 33459, 3506, 1594, -16826, 2813, 51404, 33380, -22671, 39335, 35388, 21337, -2530, 14934, -7909, -51399, 11778, 114283, 28448, 2003, 56596, -369, 155172, -26305, 15250, -25690, 2617, 108446, -1764, 73272, 1096, -22883, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.9410215625539422e-05, 6.3863422838039696e-05, 0.00015663314843550324, 0.00011310218542348593, 0.00018208255642093718, 0.00017507803568150848, 0.00014310138067230582, 6.7586333898361772e-05, 8.660887397127226e-05, 3.6539520806400105e-05, 8.4944214904680848e-05, 2.7702228180714883e-05, 0.00017915155331138521, 0.005541567225009203, 6.7581539042294025e-05, 0.00025296147214248776, 0.0027484172023832798, 1.8511604139348492e-05, 8.1348589446861297e-05, 0.00016833613335620612, 0.00012461977894417942, 0.00013822449545841664, 0.00011168771015945822, 3.8630460039712489e-05, 9.8236661870032549e-05, 7.0379224780481309e-05, 3.7069763493491337e-05, 4.7780104068806395e-05, 0.00022754713427275419, 6.123301136540249e-05, 5.226011126069352e-05, 0.00019395598792470992, 0.00021101077436469495, 7.989304322109092e-06, 8.8999884610529989e-05, 0.00017229017976205796, 1.5845826055738144e-05, 0.00043925739009864628, 3.006908627867233e-05, 9.0200002887286246e-05, 7.2940958489198238e-05, 0.00016797844727989286, 0.00010698662663344294, 8.4530429376172833e-06, 0.00018607296806294471, 8.0173456808552146e-05, 0.00021693794406019151, 0.00012689809955190867, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-7,-17,8,-39,-79,-68,-26,-50,8,65,35,-71,114,-43,-113,-84,37,-7,-1,-72,-111,-80,-35,-124,-64,-22,70,15,95,27,-127,-88,-7,54,19,48,-127,79,-77,-14,104,-110,-2,-35,-87,107, 76,11,-28,-28,58,-127,-127,-82,61,-77,-115,108,38,-82,-1,62,-52,-111,60,7,11,-112,-127,-70,-5,-127,-120,-41,-55,21,-57,54,28,-127,64,84,14,73,-93,127,-127,6,123,-127,2,-23,-127,95, -32,42,7,-5,-64,-109,-59,-17,86,-8,-127,38,8,-71,-101,-11,-127,-26,27,12,-15,-77,-35,-23,-12,-30,-58,-12,-10,17,-24,9,106,-87,71,31,14,36,-4,15,-79,3,7,-78,-17,6,-55,15, 
  /* [0][1][][] */ -86,-127,-45,-44,-9,54,98,-105,-26,-108,-21,111,90,-64,27,-97,-121,-93,89,-77,41,-87,-102,-127,42,-118,-79,-39,127,-60,127,85,-44,-83,-14,84,-35,-76,-106,90,41,59,103,-110,-91,-117,81,119, 127,-83,-127,-127,127,40,93,-127,101,-127,-110,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-119,127,-97,-127,-127,-120,-127,-71,127,28,-110,127,127,-69,-127,-96,90,60,127,127,-116,-112,-127,124,127, -53,31,-61,-85,-119,-23,31,-37,127,-20,-77,35,55,-70,-25,-44,-37,-30,54,-71,57,-83,-38,-25,48,-4,-46,-60,15,-89,-36,20,29,-99,118,24,-36,-62,2,-15,36,53,11,-75,-57,-38,65,36, 
  /* [0][2][][] */ -61,-107,-34,-34,0,35,-4,-35,-38,-59,-17,61,77,-127,-127,-64,-43,-20,63,75,53,-33,-11,-60,33,-54,-10,-60,75,28,78,63,107,-25,-38,-9,-95,35,-17,31,9,36,16,-58,96,-77,4,32, 88,-72,-88,-86,81,19,7,-48,48,-70,-33,57,84,-26,16,93,-24,-32,77,118,82,-53,-18,-58,93,-67,-19,-101,-51,39,-46,111,-18,-49,67,6,-127,50,-15,-1,10,32,16,-68,127,-100,-11,41, -29,29,-41,-37,-79,-18,22,-12,60,-5,-13,32,31,-43,111,-29,-93,-5,31,61,75,-28,-2,-2,43,2,-5,-64,-13,28,-19,40,-91,-44,66,4,-21,21,27,-39,6,34,-4,-15,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0042249341495335102, 0.0027141952887177467, 0.0066569084301590919, 0.0048068426549434662, 0.0077385082840919495, 0.0074408161453902721, 0.0060818088240921497, 0.0028724190779030323, 0.0036808771546930075, 0.0015529296360909939, 0.003610129002481699, 0.0011773447040468454, 0.0076139406301081181, 0.23551659286022186, 0.0028722153510898352, 0.010750862769782543, 0.1168077290058136, 0.00078674318501725793, 0.0034573150333017111, 0.007154285442084074, 0.005296340212225914, 0.0058745411224663258, 0.0047467276453971863, 0.0016417945735156536, 0.0041750581003725529, 0.0029911170713603497, 0.0015754648484289646, 0.0020306543447077274, 0.0096707530319690704, 0.0026024030521512032, 0.0022210546303540468, 0.008243129588663578, 0.0089679574593901634, 0.00033954542595893145, 0.0037824951577931643, 0.0073223323561251163, 0.00067344756098464131, 0.018668439239263535, 0.0012779361568391323, 0.0038334999699145555, 0.0030999905429780483, 0.0071390839293599129, 0.004546931479126215, 0.00035925430711358786, 0.0079081011936068535, 0.0034073716960847378, 0.0092198625206947327, 0.005393169354647398, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3803, 59, 8868, 6049, 5700, 6010, 8216, -30, -25, -308, 2093, 409, 11417, -70977952, 2837, 16180, -57297084, -102, -427, 8595, 3668, -16, 31, 371, 3203, -713, 58, 709, 4175, 1555, 2164, 13724, 3621, 262, 237, -1441, 259, 3507, -115, 10415, 2009, 10976, -263, -74, 11743, 155, 6303, 4082, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00055016099940985441, 0.00059897906612604856, 0.00035512217436917126, 0.00031262691481970251, 0.00035216865944676101, 0.00034638337092474103, 0.00046635317266918719, 0.0017944357823580503, 0.00052774470532312989, 0.0024596629664301872, 0.00070129852974787354, 0.0021247540134936571, 0.00019459442410152406, 2.2849864222962424e-09, 0.00092542706988751888, 0.00020456258789636195, 2.2849864222962424e-09, 0.0072373980656266212, 0.00046414186363108456, 0.00045069513726048172, 0.00030344727565534413, 0.0052100610919296741, 0.00036925994209013879, 0.0017014788463711739, 0.0011800648644566536, 0.00078451394801959395, 0.0026256081182509661, 0.0017790579004213214, 0.00026825602981261909, 0.0018883063457906246, 0.001372627797536552, 0.00017176558321807534, 0.00021104019833728671, 0.012347400188446045, 0.00064103631302714348, 0.00081595970550552011, 0.005905982106924057, 0.00036367776920087636, 0.0031058287713676691, 0.00033311475999653339, 0.0014189266366884112, 0.00019804188923444599, 0.0006830667844042182, 0.011656424961984158, 0.00042735124588944018, 0.00056645070435479283, 0.00044379610335454345, 0.00021589628886431456, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 12,-127,49,-43,30,-13,-50,14, 
  /* [1][0][][] */ 69,55,-17,-81,-4,-11,-63,127, 
  /* [2][0][][] */ 29,2,-52,118,46,127,50,88, 
  /* [3][0][][] */ 84,73,-80,127,-99,-6,-6,16, 
  /* [4][0][][] */ -45,-84,67,16,11,26,-29,-127, 
  /* [5][0][][] */ 20,4,-43,41,10,-34,37,127, 
  /* [6][0][][] */ 60,-12,-127,-101,114,21,46,-44, 
  /* [7][0][][] */ 127,19,23,-21,27,-4,79,-55, 
  /* [8][0][][] */ 15,-96,9,106,-7,20,-1,-127, 
  /* [9][0][][] */ 114,-127,10,2,-18,8,-119,97, 
  /* [10][0][][] */ -127,-47,-124,20,-16,13,-106,60, 
  /* [11][0][][] */ -23,-47,-8,-110,-127,-36,49,-19, 
  /* [12][0][][] */ 17,2,-39,64,-76,-22,58,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-28,-3,11,37,127,47,42, 
  /* [15][0][][] */ 39,7,11,-127,69,39,-51,74, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 16,27,127,22,-33,-16,32,34, 
  /* [18][0][][] */ 88,-127,32,30,-16,25,-121,1, 
  /* [19][0][][] */ -127,-11,28,90,-69,-44,-86,74, 
  /* [20][0][][] */ 38,41,-35,121,-20,-127,-11,65, 
  /* [21][0][][] */ 58,25,127,9,-14,-9,63,10, 
  /* [22][0][][] */ -78,-11,-127,8,6,9,-103,3, 
  /* [23][0][][] */ -92,121,-20,-20,1,-12,127,-72, 
  /* [24][0][][] */ 8,-50,-49,90,-16,-62,101,127, 
  /* [25][0][][] */ 10,37,30,22,127,114,-78,-51, 
  /* [26][0][][] */ -80,-28,-127,-1,5,14,-93,1, 
  /* [27][0][][] */ 0,-31,-36,3,-48,127,63,52, 
  /* [28][0][][] */ 4,-25,-22,42,22,127,52,62, 
  /* [29][0][][] */ 89,33,127,0,-22,-18,86,-5, 
  /* [30][0][][] */ -75,127,-23,-34,17,-4,100,-41, 
  /* [31][0][][] */ -49,-103,-27,-2,44,-75,127,124, 
  /* [32][0][][] */ 9,3,-48,113,-15,101,87,127, 
  /* [33][0][][] */ 1,62,-12,-108,10,-14,-7,127, 
  /* [34][0][][] */ -16,74,-3,-92,23,-8,12,127, 
  /* [35][0][][] */ 127,14,-12,-48,9,49,94,-48, 
  /* [36][0][][] */ -127,-1,22,66,-41,9,-122,86, 
  /* [37][0][][] */ -9,-24,-13,27,33,127,48,47, 
  /* [38][0][][] */ 15,18,4,78,127,-5,-17,33, 
  /* [39][0][][] */ 5,32,37,-126,36,2,-46,127, 
  /* [40][0][][] */ 100,27,127,7,-4,-1,89,-3, 
  /* [41][0][][] */ 6,-32,-34,79,47,127,76,106, 
  /* [42][0][][] */ -79,-2,127,14,-42,16,-35,73, 
  /* [43][0][][] */ -8,-58,8,101,-23,3,19,-127, 
  /* [44][0][][] */ 35,5,-64,-127,56,-11,0,-105, 
  /* [45][0][][] */ -85,127,1,-46,4,-5,79,-61, 
  /* [46][0][][] */ -127,-13,45,30,-28,39,-87,43, 
  /* [47][0][][] */ 120,24,127,6,35,-31,127,-14, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00094792171148583293, 0.0010320347500964999, 0.00061187183018773794, 0.00053865293739363551, 0.00060678296722471714, 0.00059681496350094676, 0.00080352171789854765, 0.0030917944386601448, 0.00090929865837097168, 0.0042379740625619888, 0.0012083301553502679, 0.0036609293892979622, 0.00033528418862260878, 3.937008052901092e-09, 0.0015945013146847486, 0.00035245923209004104, 3.937008052901092e-09, 0.012469962239265442, 0.00079971167724579573, 0.00077654310734942555, 0.00052283651893958449, 0.0089768813923001289, 0.000636231095995754, 0.0029316304717212915, 0.00203323969617486, 0.0013517094776034355, 0.0045238956809043884, 0.0030652985442429781, 0.00046220238436944783, 0.0032535323407500982, 0.0023650235962122679, 0.00029595033265650272, 0.00036362008540891111, 0.021274443715810776, 0.0011044989805668592, 0.0014058902161195874, 0.010175946168601513, 0.00062661303672939539, 0.0053513110615313053, 0.0005739533226005733, 0.0024447960313409567, 0.00034122413489967585, 0.0011769169941544533, 0.020083900541067123, 0.00073632178828120232, 0.00097598868887871504, 0.00076465611346065998, 0.00037198708741925657, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -948, -44310, -7722, -13202, -32230, -2306, -24231, -26628, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021015629172325134, 0.002411342691630125, 0.0024719384964555502, 0.001276037422940135, 0.0011775264283642173, 0.0025637687649577856, 0.0017018459038808942, 0.0011681565083563328, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,-1,2,127,0,-3,3,-2,-126,-96,-7,0,126,-2,0, 
  /* [1][0][][] */ 0,-28,-1,88,76,13,24,7,0,-7,127,-45,0,31,-13,0, 
  /* [2][0][][] */ 0,2,-2,-10,-59,3,12,0,1,2,-19,0,0,127,-8,0, 
  /* [3][0][][] */ 0,-13,-20,-127,84,24,67,19,-1,64,-2,41,0,0,20,0, 
  /* [4][0][][] */ 0,49,-24,37,-59,34,127,8,1,-65,19,-9,0,-10,17,0, 
  /* [5][0][][] */ 0,-16,-9,0,-20,-22,-15,16,1,9,-4,-40,0,-6,127,0, 
  /* [6][0][][] */ 0,16,0,5,50,-20,-27,-6,-3,-109,111,65,0,127,57,0, 
  /* [7][0][][] */ 0,11,-12,127,7,-1,14,11,-1,66,-54,71,0,-7,48,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.089316420257091522, 0.10248206555843353, 0.10505738109350204, 0.054231591522693634, 0.050044871866703033, 0.10896016657352448, 0.072328448295593262, 0.04964664950966835, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 14904, 55046, 8015, 9099, 42155, 13653, 19167, -7917, 4794, 27983, 15123, -445, 25071, 10760, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00017449588631279767, 7.2932554758153856e-05, 0.0004362806212157011, 0.00019308837363496423, 7.8721510362811387e-05, 0.00039284882950596511, 0.00020462425891309977, 2.5189132429659367e-05, 0.00036606713547371328, 0.00022396141139324754, 0.00082113279495388269, 0.00072724185883998871, 0.00027502005104906857, 0.00019276185776107013, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-89,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,77,-94,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-27,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-26,7,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-7,39,-40,52,-77,0,0,5,40,2,-27,23, 23,-4,32,-2,-27,40,-35,20,-126,-13,0,85,-58,0,-29,-111, 21,-7,19,0,4,14,8,22,-116,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0074160750955343246, 0.0030996336136013269, 0.018541926518082619, 0.0082062557339668274, 0.0033456641249358654, 0.016696074977517128, 0.0086965309455990791, 0.0010705380700528622, 0.015557852573692799, 0.0095183597877621651, 0.034898143261671066, 0.030907778069376945, 0.011688351631164551, 0.0081923790276050568, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 14267, -71485, 15693, 217321, 16631, 60649, 7606, -66303, 31753, 13353, 768764, -1073741824, 26537, 45379, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023095223878044635, 0.00024708767887204885, 4.4052161683794111e-05, 1.3938263691670727e-05, 0.00025555476895533502, 6.9345689553301781e-05, 0.00030598838930018246, 7.5310708780307323e-06, 5.154902464710176e-05, 0.00022193575568962842, 7.5862326411879621e-06, 1.1533876076441629e-09, 0.00014552094216924161, 8.2796301285270602e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 45,-7,33, -5,-25,20, -127,-127,-63, 
  /* [1][1][][] */ 3,-6,4, -21,2,1, -1,-35,8, 
  /* [1][2][][] */ -2,18,4, -5,6,1, 37,-21,12, 
  /* [2][0][][] */ 28,-2,-2, 68,115,4, 32,-40,8, 
  /* [2][1][][] */ 13,17,4, 65,127,-24, 14,-7,-6, 
  /* [2][2][][] */ 51,-59,25, 75,-38,-17, 30,-54,15, 
  /* [3][0][][] */ 6,35,6, 27,89,20, 0,6,-3, 
  /* [3][1][][] */ 23,40,10, 65,127,28, -13,-17,6, 
  /* [3][2][][] */ 9,12,7, 30,33,15, 3,2,11, 
  /* [4][0][][] */ 40,71,-17, 16,74,-16, -16,4,-7, 
  /* [4][1][][] */ 49,89,48, 38,119,30, 37,51,-18, 
  /* [4][2][][] */ 61,82,36, 56,127,16, -9,27,22, 
  /* [5][0][][] */ 7,6,-118, -4,5,-100, -7,29,-25, 
  /* [5][1][][] */ 4,-37,-127, -2,-40,-110, -3,15,-21, 
  /* [5][2][][] */ -3,12,-15, 0,0,-9, -1,15,-8, 
  /* [6][0][][] */ 23,-66,30, 44,-89,36, 7,-22,6, 
  /* [6][1][][] */ 35,-98,57, 63,-127,68, 7,-29,15, 
  /* [6][2][][] */ 20,-35,9, 16,-42,25, -10,9,-1, 
  /* [7][0][][] */ -34,11,0, -107,-46,-2, -20,19,-1, 
  /* [7][1][][] */ -14,-12,-2, -127,-98,-9, -5,-8,2, 
  /* [7][2][][] */ -26,28,-11, -14,7,-2, -21,22,-4, 
  /* [8][0][][] */ 40,38,49, 46,42,52, -9,-13,-8, 
  /* [8][1][][] */ 38,37,46, 44,40,49, -9,-13,-9, 
  /* [8][2][][] */ 122,116,118, 127,120,122, 72,66,69, 
  /* [9][0][][] */ -21,-3,13, -13,-6,4, 3,4,-7, 
  /* [9][1][][] */ 101,121,-1, 70,127,20, -8,22,30, 
  /* [9][2][][] */ -25,-21,19, 5,-29,1, 13,7,-20, 
  /* [10][0][][] */ -24,-83,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -18,-30,-4, 6,-48,2, 5,-109,-59, 
  /* [11][1][][] */ -52,-48,-23, -41,-70,-42, -20,-67,-60, 
  /* [11][2][][] */ -13,-46,-87, 117,127,61, -45,9,-54, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -9,-17,-6, 
  /* [13][1][][] */ 61,114,15, 58,127,25, 7,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 45,-5,-42, 76,-27,-56, 27,-13,-26, 
  /* [14][1][][] */ 90,-15,-78, 127,-40,-93, 55,-21,-43, 
  /* [14][2][][] */ 57,-7,-48, 76,-20,-55, 25,-6,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 4.5559357886304497e-07, 0.080308392643928528, 0.085919119417667389, 0.015318138524889946, 0.0048467144370079041, 0.088863365352153778, 0.024113386869430542, 0.1064005047082901, 0.0026187587063759565, 0.017925001680850983, 0.077173113822937012, 0.0026379399932920933, 4.0106431242747931e-07, 0.050601597875356674, 0.028790531679987907, 4.3235530711172032e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.58038651943206787, } };
const TfArray<1, int> quant46_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.481535404920578, } };
const TfArray<1, int> quant50_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.53138905763626099, } };
const TfArray<1, int> quant53_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.58724123239517212, } };
const TfArray<1, int> quant54_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.34607434272766113, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23778076469898224, } };
const TfArray<1, int> quant61_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.35370579361915588, } };
const TfArray<1, int> quant62_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.27281549572944641, } };
const TfArray<1, int> quant65_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.46994468569755554, } };
const TfArray<1, int> quant66_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.060907188802957535, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.082454591989517212, } };
const TfArray<1, int> quant69_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 688, (TfLiteIntArray*)&tensor_dimension69, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_15_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_15_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_15_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_15_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_15_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
